<apex:page controller="Flosum.EditRepositorySettingsController" doctype="html-5.0" sidebar="false" cache="false" id="repositorySettings">
	<apex:slds />
	<apex:includeScript value="{!URLFOR($Resource.Flosum__Merge, 'Merge/jquery-2.1.4.min.js')}" />
	<apex:includeScript value="{!URLFOR($Resource.Flosum__uisetup, 'js/jquery-ui.js')}"/>
	<apex:includeScript value="{!URLFOR($Resource.Flosum__uisetup, 'js/jquery.validate.min.js')}"/>
	<apex:stylesheet value="{!URLFOR($Resource.Flosum__Merge, 'Merge/css/jquery-ui.css')}"/>
	
	<style>
		.tooltip {
			position:absolute;
			background-color:#ffff66;
			border: 1px solid #aaaaca;
			font-size: smaller;
			padding:4px;
			width: 160px;
			box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1);
			-moz-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1);
			-webkit-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1);	
		}
		.message {
			opacity: 0.75;
		}
		.customMessage {
        	margin-left: 0px !important;
   			margin-top: 0px !important;
			opacity: 1!important;
        //			width: 100%;
			font-size: 13px;
			border: 0px;
			padding-left: 10px;
        }
		.fontClass {
			font-size: 20px !important;
		}
		.lbcls {
		    font-weight: 700 !important;
		}
		.requiredInput .requiredBlock {
	        background-color: #c00;
		    position: absolute;
		    left: -4px;
		    width: 3px;
		    top: 23px;
		    height: 30px;
		    bottom: 1px;
		 }
		 .slds-scope .slds-form-element__label {
		 	color: black !important;
		 }
		 input[type="checkbox"] {
			width: 1rem;
		    height: 1rem;
		   	border: 1px solid #dddbda;
		    border-radius: 0.125rem;
		    background: white!important;
		    transition: border 0.1s linear, background-color 0.1s linear;
		}
		.slds-scope .slds-table th {
    		font-weight: 700 !important;
    	}
    	.slds-scope .slds-m-bottom--medium, .slds-scope .slds-m-bottom_medium {
    		margin-bottom: 0px !important;
    	}
    	.panelPadding {
    		padding-left: 1.5rem !important;
    	}
    	.slds-scope .slds-table td, .slds-scope .slds-table th {
    		padding: .3rem !important;
    	}
    	
    	/********/
    	input.text {
            margin-bottom: 12px;
            width: 95%;
            padding: .4em;
        }

        select {
            margin-bottom: 12px;
            width: 98%;
            padding: .4em;
        }

        fieldset {
            padding: 0;
            border: 0;
            margin-top: 25px;
            font-size: 80%;
        }

        .ui-dialog .ui-state-error {
            padding: .3em;
        }

        .validateTips {
            border: 1px solid transparent;
            padding: 0.3em;
        }

        .ui-accordion .ui-accordion-content {
            height: 100%;
            padding: 0 0;
        }

        table.gridtable {
            font-family: verdana,arial,sans-serif;
            font-size: 11px;
            color: #333333;
            border-width: 1px;
            border-color: #666666;
            border-collapse: collapse;
            width: 100%;
        }

        table.gridtable th {
            border-width: 1px;
            padding: 8px;
            border-style: solid;
            border-color: #666666;
            background-color: #dedede;
        }

        table.gridtable td {
            border-width: 1px;
            padding: 8px;
            border-style: solid;
            border-color: #666666;
            background-color: #ffffff;
        }
        
        form input {
			height: 25px;
			line-height: 25px;
			background: #fff;
			color: #000;
			padding: 0 6px;
			-moz-box-sizing: border-box;
			-webkit-box-sizing: border-box;
			box-sizing: border-box;
		}
				
		form .error {
	  		color: #ff0000;
		}
        /***********/
	</style>

    <apex:outputPanel layout="block" styleClass="slds-scope">
		<apex:pagemessages id="msg"/>
		<apex:form styleClass="slds-form--stacked">
	     	<div class="slds-page-header">
				<div class="slds-grid">
					<div class="slds-col slds-has-flexi-truncate">
						<div class="slds-media slds-no-space slds-grow">
							<div class="slds-media__body">
								<h1 class="slds-page-header__title slds-truncate slds-align-middle" title="Remote Repository settings">Remote Repository settings</h1>
								<p>Edit Remote repository settings</p>
							</div>
						</div>
					</div>
					<apex:outputPanel >
						<div class="slds-col slds-no-flex slds-grid slds-align-top">
							<div class="slds-button-group" role="group">
								<apex:commandbutton styleClass="slds-button slds-button_neutral" value="Cancel" immediate="true" action="{!doCancel}"/>
							</div>
						</div>
					</apex:outputPanel>
				</div>
			</div>
		</apex:form>
	 	<apex:form styleClass="slds-form--stacked">
	        <fieldset class="slds-box slds-m-bottom--medium">
	        	<apex:outputPanel layout="block" styleClass="slds-box" id="HerokuServiceSection">
					<div class="slds-card__header slds-grid">
						<header class="slds-media slds-media_center slds-has-flexi-truncate">
							<div class="slds-media__body">
								<h2><span class="slds-text-heading_small fontClass">{!$Label.flosum__heroku_service_settings_title}</span></h2>
							</div>
						</header>
						<div class="slds-no-flex">
							<apex:commandbutton styleClass="slds-button slds-button_neutral" value="Save" action="{!updateRecord}" onComplete="saveHSettings('{!bShowGitExt}');" reRender="msg,HerokuServiceSection"/>
							<apex:commandbutton styleClass="slds-button slds-button_neutral" value="Validate" action="{!updateRecord}" onComplete="validateHSettings();" reRender="msg,HerokuServiceSection"/>
		                	<apex:commandbutton styleClass="slds-button slds-button_neutral" value="Cancel" immediate="true" action="{!cancel}"/>
						</div>
					</div>
					<apex:outputPanel layout="block" styleClass="slds-card__body slds-card__body_inner">
		            	<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
		            		<label class="slds-form-element__label slds-text-heading_regular lbcls" for="UsernameResource">
						    	<abbr class="slds-required" title="required">*</abbr>Username :
					    	</label>
							<apex:outputPanel layout="block" styleClass="requiredInput slds-form-element__control" >
								<apex:outputPanel layout="block" styleClass="requiredBlock"/>
								<apex:inputField styleClass="slds-input slds-text-heading_regular" value="{!hCred.Flosum__Username_Resource__c}" required="true" id="UsernameResource"/>
							</apex:outputPanel>
            			</apex:outputPanel>
            			<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
		            		<label class="slds-form-element__label slds-text-heading_regular lbcls" for="PasswordResource">
						    	<abbr class="slds-required" title="required">*</abbr>Password :
					    	</label>
							<apex:outputPanel layout="block" styleClass="requiredInput slds-form-element__control" >
								<apex:outputPanel layout="block" styleClass="requiredBlock"/>
								<apex:inputField styleClass="slds-input slds-text-heading_regular" value="{!hCred.Flosum__Password_Resource__c}" required="true" id="PasswordResource"/>
							</apex:outputPanel>
            			</apex:outputPanel>
            			<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
		            		<apex:outputLabel styleClass="slds-form-element__label slds-text-heading_regular lbcls" value="AccessPoint :" />
							<apex:outputPanel layout="block" styleClass="requiredInput slds-form-element__control" >
								<apex:outputPanel layout="block" styleClass="requiredBlock"/>
								<apex:inputField styleClass="slds-input slds-text-heading_regular" value="{!hCred.Flosum__AccessPoint__c}" required="true" html-placeholder="https://your-app-name.herokuapp.com" id="AccessPoint"/>
							</apex:outputPanel>
            			</apex:outputPanel>
            			<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
						    <div class="slds-form-element__control">
						        <span class="slds-checkbox">
						            <apex:inputCheckBox styleclass="slds-input" value="{!hCred.Flosum__isAutoSync__c}" id="chkBox1"/>
						            <apex:outputLabel for="chkBox1" styleClass="slds-checkbox__label">
						            	<apex:outputLabel styleClass="lbcls" value="{!$Label.flosum__git_enabled_label}" />&nbsp;&nbsp;&nbsp;
						                <span class="slds-checkbox--faux"></span>
						                <span class="slds-form-element__label"></span>
						            </apex:outputLabel>
						        </span>
						    </div>
						</apex:outputPanel>
		            </apex:outputPanel>
	            </apex:outputPanel>
            </fieldset>
		</apex:form>
		
	    <apex:form styleClass="slds-form--stacked">
	        <fieldset class="slds-box slds-m-bottom--medium">        
		        <apex:outputPanel styleClass="slds-box" layout="block">
					<div class="slds-card__header slds-grid">
						<header class="slds-media slds-media_center slds-has-flexi-truncate">
							<div class="slds-media__body">
								<h2><span class="slds-text-heading_small fontClass">Synchronization options</span></h2>
							</div>
						</header>
						<div class="slds-no-flex">
							<apex:commandButton styleClass="slds-button slds-button_neutral" value="Save" action="{!saveSettings}"/>
						</div>
					</div>
					<apex:outputPanel layout="block" styleClass="slds-card__body slds-card__body_inner">
			            <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
							<apex:outputPanel >
								<fieldset class="slds-form-element slds-m-top_medium">
				                	<apex:selectCheckboxes value="{!SyncItems}" layout="pageDirection">
					    				<apex:selectOptions value="{!SyncOptions}"/>
					    			</apex:selectCheckboxes>
			            		</fieldset>
							</apex:outputPanel>
						</apex:outputPanel>
			            <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
							<fieldset class="slds-form-element slds-m-top_medium">
			                	<apex:outputLabel value="Get authorization token for Heroku service"/>&nbsp;&nbsp;&nbsp;
					            <apex:commandbutton styleClass="slds-button slds-button_neutral" value="Get token" action="{!auth}" oncomplete="getTokens();overridePageMessages();" rerender="msg"/>
		            		</fieldset>
						</apex:outputPanel>
			            <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
						    <div class="slds-form-element__control">
						        <span class="slds-checkbox">
						            <apex:inputCheckBox styleclass="slds-input" value="{!hCred.Flosum__isScheduledSync__c}" id="chkBox3"/>
						            <apex:outputLabel for="chkBox3" styleClass="slds-checkbox__label">
						            	<apex:outputLabel styleClass="lbcls" value="Use scheduled synchonization (check every 15 min)" />&nbsp;&nbsp;&nbsp;
						                <span class="slds-checkbox--faux"></span>
						                <span class="slds-form-element__label"></span>
						            </apex:outputLabel>
						        </span>
						    </div>
						</apex:outputPanel>
						<apex:outputPanel styleClass="slds-m-top_small" layout="block" style="display:none" id="tokenArea">
							<apex:outputPanel styleClass="slds-form-element slds-size--6-of-12" layout="block">
								<apex:outputLabel styleClass="slds-form-element__label slds-text-heading_regular lbcls" value="Generated token :"/>
								<apex:outputPanel styleClass="requiredInput slds-form-element__control" layout="block">						 
									<textarea class="slds-input" value="" rows="4" id="token"/>
			                        <div style="text-align: center">
				               			<abbr title="COPIED">
				               				<apex:commandbutton styleClass="slds-button slds-button_neutral" value="Copy to clipboard" onclick="copyTokenToClipboard();" rerender="none"/>
			               				</abbr>
				               		</div>
								</apex:outputPanel>
							</apex:outputPanel>
						</apex:outputPanel>
		            </apex:outputPanel>
	            </apex:outputPanel>
            </fieldset>
		</apex:form>
		
	    <apex:form styleClass="slds-form--stacked" id="GitExt">
	        <fieldset class="slds-box slds-m-bottom--medium">        
		        <apex:outputPanel styleClass="slds-box" layout="block">
					<div class="slds-card__header slds-grid">
						<header class="slds-media slds-media_center slds-has-flexi-truncate">
							<div class="slds-media__body">
								<h2><span class="slds-text-heading_small fontClass">{!$Label.flosum__git_credentials}</span></h2>
							</div>
						</header>
						<div class="slds-no-flex">
							<apex:commandButton styleClass="slds-button slds-button_neutral" value="New" action="{!newRecord}" oncomplete="openEditor()" rerender="none"/>
						</div>
					</div>
		            <apex:outputPanel styleClass="slds-card__body slds-card__body_inner" layout="block" id="dataTable">
						<apex:dataTable styleClass="slds-table slds-table_bordered slds-table_cell-buffer" value="{!repoCredsList}" var="item" rendered="{!repoCredsList != null}" >
							<apex:column headerValue="{!$Label.flosum__action_column}">
								<apex:commandLink action="{!editRecord}" oncomplete="openEditor('{!JSENCODE(recordJSON)}');return false;" value="Edit" style="color:blue;" rerender="editRecord,topper">
			                    	<apex:param name="sParam" value="{!item.Id}" assignTo="{!selectedRecId}"/>
			                   	</apex:commandLink>
		                   		<span> | </span>
								<apex:commandLink action="{!delRecord}" value="Del" style="color:blue;" onclick="return confirm('Do you want to delete?');">
			                    	<apex:param name="sParam" value="{!item.Id}" assignTo="{!selectedRecId}"/>
			                   	</apex:commandLink>
		                    </apex:column> 
				        	<apex:column headerValue="{!$Label.flosum__islinked_column}">
		                       	<apex:inputCheckbox value="{!item.Flosum__isLinked__c}" disabled="true"/>
		                    </apex:column> 
				        	<apex:column headerValue="{!$Label.flosum__git_credentials_name}">
		                       	<apex:commandLink action="{!editRecord}" value="{!item.Name}" oncomplete="openEditor('{!JSENCODE(recordJSON)}')" rerender="editRecord,topper">
		                    		<apex:param name="sParam" value="{!item.Id}" assignTo="{!selectedRecId}"/>
		                    	</apex:commandLink>
		                    </apex:column>
				        	<apex:column headerValue="URI">
		                       	<apex:outputText value="{!item.Flosum__Uri__c}"/>
		                    </apex:column>
				        </apex:dataTable>
		                <apex:outputText styleClass="slds-input" style="text-align:center;" value="No records to display." rendered="{!repoCredsList == null}"/>
		           	</apex:outputPanel>
		        </apex:outputPanel>
	        </fieldset>
		</apex:form>
		
		<apex:form styleClass="slds-form--stacked" id="attForm" rendered="{!sobjId != null}">
	        <fieldset class="slds-box slds-m-bottom--medium">        
				<apex:outputPanel styleClass="slds-box" layout="block">
					<div class="slds-card__header slds-grid">
						<header class="slds-media slds-media_center slds-has-flexi-truncate">
							<div class="slds-media__body">
								<h2><span class="slds-text-heading_small fontClass">Upload SSH key</span></h2>
							</div>
						</header>
						<div class="slds-no-flex">
							<apex:commandButton styleClass="slds-button slds-button_neutral" value="Save" action="{!save}" />
						</div>
					</div>
					<apex:outputPanel styleClass="slds-m-top_small panelPadding" layout="block">
						<apex:repeat value="{!newAttachments}" var="newAtt">
							<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
								<apex:outputLabel styleClass="slds-form-element__label slds-text-heading_regular lbcls" value="File :"/>
								<apex:outputPanel styleClass="requiredInput slds-form-element__control" layout="block">						 
									<apex:inputFile styleClass="slds-text-heading_regular" value="{!newAtt.body}" filename="{!newAtt.name}"/>
								</apex:outputPanel>
							</apex:outputPanel>
							<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
								<apex:outputLabel styleClass="slds-form-element__label slds-text-heading_regular lbcls" value="Description :"/>
								<apex:outputPanel styleClass="slds-form-element__control" layout="block">
									<apex:inputText styleClass="slds-text-heading_regular slds-input" value="{!newAtt.Description}"/>
								</apex:outputPanel>
							</apex:outputPanel>
						</apex:repeat>
					</apex:outputPanel>
				</apex:outputPanel>
			</fieldset>
		</apex:form>
		
		<apex:form styleClass="slds-form--stacked" id="attTable" rendered="{!sobjId != null}">
	        <fieldset class="slds-box slds-m-bottom--medium">		
				<apex:outputPanel styleClass="slds-box" layout="block">
					<div class="slds-card__header slds-grid">
						<header class="slds-media slds-media_center slds-has-flexi-truncate">
							<div class="slds-media__body">
								<h2><span class="slds-text-heading_small fontClass">Existing SSH keys</span></h2>
							</div>
						</header>
					</div>
		            <apex:outputPanel styleClass="slds-card__body slds-card__body_inner" layout="block" >
						<apex:dataTable styleClass="slds-table slds-table_bordered slds-table_cell-buffer" value="{!attachments}" var="attachment" id="dataTable" rendered="{!attachments != null}">
							<apex:column headerValue="Action">
								<apex:outputLink value="{!URLFOR($Action.Attachment.Download, attachment.Id)}" target="_blank" style="color:blue;">View</apex:outputLink>
							   	<span> | </span> 
							   	<apex:commandLink action="{!delKey}" value="Del" style="color:blue;" onclick="return confirm('Do you want to delete?');">
				               		<apex:param name="sParam" value="{!attachment.Id}" assignTo="{!selectedAttId}"/>
				               	</apex:commandLink>
							</apex:column>
							<apex:column headerValue="Name">
								<apex:outputText value="{!attachment.Name}"/>
							</apex:column>
							<apex:column headerValue="Description">
								<apex:outputText value="{!attachment.Description}"/>
							</apex:column>
						</apex:dataTable>
				        <apex:outputText styleClass="slds-input" style="text-align:center;" value="No records to display." rendered="{!attachments == null}"/>
			        </apex:outputPanel>
				</apex:outputPanel>
			</fieldset>
		</apex:form>
		
		<!--<apex:form styleClass="slds-form--stacked" id="editRecord" style="display:none">
	        <fieldset class="slds-box slds-m-bottom--medium">		
				<apex:outputPanel styleClass="slds-box" layout="block">
					<div class="slds-card__header slds-grid">
						<header class="slds-media slds-media_center slds-has-flexi-truncate">
							<div class="slds-media__body">
								<h2><span class="slds-text-heading_small fontClass">Edit Git credentials</span></h2>
							</div>
						</header>
						<div class="slds-no-flex">
							<apex:commandButton styleClass="slds-button slds-button_neutral" value="Save" onclick="processInputData();overridePageMessages();" rerender="none"/>
				            <apex:commandButton styleClass="slds-button slds-button_neutral" value="Cancel" onclick="showEditor(false)" immediate="false" html-formnovalidate="formnovalidate" rerender="attForm, attTable"/>
						</div>
					</div> 
			    	<apex:outputPanel styleClass="slds-card__body slds-card__body_inner" layout="block" id="pb1">
				       	<apex:outputPanel layout="block">
					       	<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
								<label class="slds-form-element__label slds-text-heading_regular lbcls" for="credsName">
							    	<abbr class="slds-required" title="required">*</abbr>RepositoryCredentials Name :
						    	</label>
								<apex:outputPanel layout="block" styleClass="slds-form-element__control" >
									<apex:inputField styleClass="slds-input slds-text-heading_regular" value="{!selectedRec.Name}" id="credsName"/>
								</apex:outputPanel>
	            			</apex:outputPanel>
	            			<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
						    	<apex:outputLabel styleClass="slds-form-element__label slds-text-heading_regular lbcls" value="Access protocol :" />
								<div class="slds-form-element__control">
									<div class="slds-select_container">
										<apex:selectList styleClass="slds-select slds-text-heading_regular" size="1" value="{!selectedRec.protocol__c}" onchange="selectProtocol()" id="combo1">
							                <apex:selectOptions value="{!protocolOptions}" />
							            </apex:selectList>
									</div>
								</div>
	            			</apex:outputPanel>
            			</apex:outputPanel>
				       	<apex:outputPanel layout="block" id="recordShare1">
					       	<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
			            		<label class="slds-form-element__label slds-text-heading_regular lbcls" for="host">
							    	<abbr class="slds-required" title="required">*</abbr>Host :
						    	</label>
								<apex:outputPanel layout="block" styleClass="slds-form-element__control" >
									<apex:inputField styleClass="slds-input slds-text-heading_regular" value="{!selectedRec.Host__c}" id="host" html-placeholder="f.e. github.com (HTTPS) or git@github.com (SSH)"/>
								</apex:outputPanel>
	            			</apex:outputPanel>
	            			<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
			            		<label class="slds-form-element__label slds-text-heading_regular lbcls" for="path">
							    	<abbr class="slds-required" title="required">*</abbr>Path :
						    	</label>
								<apex:outputPanel layout="block" styleClass="slds-form-element__control" >
									<apex:inputField styleClass="slds-input slds-text-heading_regular" value="{!selectedRec.Path__c}" id="path" html-placeholder="f.e. account/repository1"/>
								</apex:outputPanel>
	            			</apex:outputPanel>
	            			<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block" id="sharedCMB">
								<apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Repository :" />
								<div class="slds-form-element__control">
									<div class="slds-select_container">
							            <apex:selectList styleClass="slds-select slds-text-heading_regular" size="1" value="{!selectedRec.RepositoryId__c}" id="localRepo">
							                <apex:selectOptions value="{!repositoryOptions}" />
							            </apex:selectList>
									</div>
								</div>
	            			</apex:outputPanel>
            			</apex:outputPanel>
				       	<apex:outputPanel layout="block" id="recordHTTPS">
					       	<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block">
			            		<label class="slds-form-element__label slds-text-heading_regular lbcls" for="username">
							    	<abbr class="slds-required" title="required">*</abbr>Username :
						    	</label>
								<apex:outputPanel layout="block" styleClass="slds-form-element__control" >
									<apex:inputField styleClass="slds-input slds-text-heading_regular" value="{!selectedRec.Username__c}" id="username"/>
								</apex:outputPanel>
	            			</apex:outputPanel>
	            			<apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block" id="pbs0">
			            		<label class="slds-form-element__label slds-text-heading_regular lbcls" for="password">
							    	<abbr class="slds-required" title="required">*</abbr>Password :
						    	</label>
								<apex:outputPanel layout="block" styleClass="slds-form-element__control" >
									<apex:inputSecret styleClass="slds-input slds-text-heading_regular" value="{!selectedRec.Password__c}" id="password"/>
								</apex:outputPanel>
	            			</apex:outputPanel>
            			</apex:outputPanel>
				       	<apex:outputPanel layout="block" id="recordSSH">
				            <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block" id="pbs1">
			            		<label class="slds-form-element__label slds-text-heading_regular lbcls" for="passphrase">
							    	<abbr class="slds-required" title="required">*</abbr>Passphrase :
						    	</label>
								<apex:outputPanel layout="block" styleClass="slds-form-element__control" >
									<apex:inputSecret styleClass="slds-input slds-text-heading_regular" value="{!selectedRec.Passphrase__c}" id="passphrase"/>
								</apex:outputPanel>
	            			</apex:outputPanel>
				            <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block" id="pbs2">
								<label class="slds-form-element__label slds-text-heading_regular lbcls" for="key1">
							    	<abbr class="slds-required" title="required">*</abbr>Public key :
						    	</label>
								<div class="slds-form-element__control">
									<div class="slds-select_container">
							            <apex:selectList styleClass="slds-select slds-text-heading_regular" size="1" value="{!selectedRec.PublicKeyId__c}" id="key1">
							                <apex:selectOptions value="{!keysOptions}" />
							            </apex:selectList>
									</div>
								</div>
	            			</apex:outputPanel>
				            <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block" id="pbs3">
								<label class="slds-form-element__label slds-text-heading_regular lbcls" for="key2">
							    	<abbr class="slds-required" title="required">*</abbr>Private key :
						    	</label>
								<div class="slds-form-element__control">
									<div class="slds-select_container">
							            <apex:selectList styleClass="slds-select slds-text-heading_regular" size="1" value="{!selectedRec.PrivateKeyId__c}" id="key2">
							                <apex:selectOptions value="{!keysOptions}" />
							            </apex:selectList>
									</div>
								</div>
	            			</apex:outputPanel>
				            <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block" id="pbs4">
								<apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Known hosts :" />
								<div class="slds-form-element__control">
									<div class="slds-select_container">
							            <apex:selectList styleClass="slds-select slds-text-heading_regular" size="1" value="{!selectedRec.KnownHostsId__c}" id="key3">
							                <apex:selectOptions value="{!keysOptions}" />
							            </apex:selectList>
									</div>
								</div>
	            			</apex:outputPanel>
			            </apex:outputPanel>
				        <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12" layout="block" id="recordShare2">
						    <div class="slds-form-element__control">
						        <span class="slds-checkbox">
						            <apex:inputCheckBox styleclass="slds-input" value="{!selectedRec.isLinked__c}" id="chkBox2"/>
						            <apex:outputLabel for="chkBox2" styleClass="slds-checkbox__label">
						            	<apex:outputLabel styleClass="lbcls" value="isActive" />&nbsp;&nbsp;&nbsp;
						                <span class="slds-checkbox--faux"></span>
						                <span class="slds-form-element__label"></span>
						            </apex:outputLabel>
						        </span>
						    </div>
						</apex:outputPanel>
			       	</apex:outputPanel>
		       	</apex:outputPanel>
	       	</fieldset>
		</apex:form>-->
		
		<apex:form styleClass="slds-form--stacked" id="feedback" style="display:none">
	        <fieldset class="slds-box slds-m-bottom--medium">       	
			 	<apex:outputPanel styleClass="slds-box" layout="block">
					<apex:inputHidden id="success" value="{!bErrors}"/>
					<apex:inputHidden id="errmessage" value="{!msg}"/>
				    <apex:actionfunction action="{!saveRecord}" oncomplete="checkErrors('{!bErrors}','{!JSENCODE(msg)}');overridePageMessages();" name="saveRecord" immediate="true" reRender="success,errmessage,dataTable">
				    	<apex:param assignTo="{!recordJSON}" value="" name="record"/>
				    </apex:actionfunction>
				    <apex:actionfunction action="{!saveHerokuSettings}" oncomplete="checkHErrors('{!bErrors}','{!JSENCODE(msg)}');checkUncheck('{!bShowGitExt}');overridePageMessages();" name="saveHerokuRecord" immediate="true" reRender="none">
				    	<apex:param assignTo="{!hCredJSON}" value="" name="creds"/>
				    </apex:actionfunction>
				    <apex:actionfunction action="{!refresh}" name="refresh" immediate="true" reRender="success,errmessage,table">
    				</apex:actionfunction>
				    <apex:actionfunction action="{!checkConnection}" oncomplete="callback('{!status}','{!JSENCODE(msg)}');overridePageMessages();" name="checkConnection" immediate="true" reRender="success,errmessage,dataTable">
				    </apex:actionfunction>
			    </apex:outputPanel>
		    </fieldset>
	    </apex:form>
	    
	    <div id="dialog-form" title="Edit Git credentials" style="display:none">
			<div id="loadingMsg" style="display:block"/>
			<form id="gcRecord">
	            <fieldset>
						<label for="credsName">Name</label>
	                	<input type="text" name="credsName" id="credsName" class="text ui-widget-content ui-corner-all" /><p/>
	                	<label for="protocol">Access protocol</label>
	                	<select name="protocol" id="protocol" class="text ui-widget-content ui-corner-all" onchange="showSets(this)" style="width:40%;">
	   		                 <option selected="selected" value="HTTPS">HTTPS</option>
	        		         <option value="SSH">SSH</option>
	                	</select>
	                	<p/>
	                	<label for="format">Project format</label>
	                	<select name="format" id="format" class="text ui-widget-content ui-corner-all" style="width:40%;">
	   		                 <option selected="selected" value="Standard">Standard</option>
	        		         <option value="DX">DX</option>
	                	</select>
	                	<p/>
						<label for="dirName">Project directory</label>
	                	<input type="text" name="dirName" id="dirName" class="text ui-widget-content ui-corner-all" /><p/>
	                	<div id="constBlock" style="display: block;">
							<label for="host">Host</label>
	    	            	<input type="text" name="host" id="host" class="text ui-widget-content ui-corner-all" /><p/>
							<label for="path">Path</label>
	            	    	<input type="text" name="path" id="path" class="text ui-widget-content ui-corner-all" /><p/>
	                		<label for="repository">Repository</label>
	                		<select name="repository" id="repository" class="text ui-widget-content ui-corner-all">
							</select>
	                	</div>
	                	<p/>
	                	<div id="recordHTTPS" style="display: block;">
						   <label for="userName">Username</label>
	                	   <input type="text" name="userName" id="userName" class="text ui-widget-content ui-corner-all"/><p/>
		  				   <label for="password">Password</label>
	                	   <input type="password" name="password" id="password" class="text ui-widget-content ui-corner-all"/><p/>
	                	</div>
	                	<div id="recordSSH" style="display: none;">
		   				   <label for="passphrase">Passphrase</label>
	                	   <input type="password" name="passphrase" id="passphrase" class="text ui-widget-content ui-corner-all" /><p/>
	                	   <label for="key1">Public key</label>
	                	   <select name="key1" id="key1" class="text ui-widget-content ui-corner-all">
		  				   </select>
		  				   <p/>
	                	   <label for="key2">Private key</label>
	                	   <select name="key2" id="key2" class="text ui-widget-content ui-corner-all">
		   				   </select>
		   				   <p/>
	                	   <label for="key3">Known Hosts</label>
	                	   <select name="key3" id="key3" class="text ui-widget-content ui-corner-all">
		   				   </select>
	                	</div>
	  				   <p/>
	                   <div>
						   <label for="chkBox3">Active</label>
	                	   <input type="checkbox" name="chkBox3" id="chkBox3"/>
	                   </div>
	                 <!-- Allow form submission with keyboard without duplicating the dialog button -->
	                <input type="submit" tabindex="-1" style="position:absolute; top:-1000px" />
	            </fieldset>
	        </form>
	    </div>
    </apex:outputPanel>
   
    <script>
    	var showGitCredsTable = '{!bShowGitExt}';
		checkUncheck(showGitCredsTable);
		var optionHttps = true;
		var optionSsh = false;
		var access_code = '{!JSENCODE(code)}';
		var secret = '{!JSENCODE(consumerSecret)}';
		var key = '{!JSENCODE(consumerKey)}';
		var redirect_uri = '{!JSENCODE(redirect_url)}';
		var base_uri = '{!JSENCODE(base_url)}';
		var login_url = '{!JSENCODE(login_url)}';
		const message1 = 'A new refresh token has been generated. This token used to make callbacks from Heroku. Update by this data the config variable with name sftoken on the Settings page on Heroku. '+
							' After that verify connection to your active git repository on the Git Credentials section';
		var selected = 'HTTPS';
		var pageURL = '{!JSENCODE(pageURL)}';
		
		$(document).ready(function() {
			
			$('abbr').each(function(){
				$(this).data('title',$(this).attr('title'));
				$(this).removeAttr('title');
			});
	
			$('abbr').click(function(){
		
				$('abbr').next('.tooltip').remove();
				$(this).after('<span class="tooltip">' + $(this).data('title') + '</span>');
		
				var left = $(this).position().left + $(this).width() + 4;
				var top = $(this).position().top - 4;
				$(this).next().css('left',left);
				$(this).next().css('top',top);				
		
				$(this).next('.tooltip').animate({opacity: 0.9},{duration: 2000, complete: function(){
					$(this).fadeOut(1000);
				}});
		
			});
			
			var repo = '{!JSENCODE(repoOptJSON)}';
			var keys = '{!JSENCODE(keysOptJSON)}';
  			if (repo != undefined){
  				repoOpt = JSON.parse(repo);
  				createObjectsOptionLi('#repository','',repoOpt);
  			}
  			if (keys != undefined){
  				keysOpt = JSON.parse(keys);
  				createObjectsOptionLi('#key1','',keysOpt);
  				createObjectsOptionLi('#key2','',keysOpt);
  				createObjectsOptionLi('#key3','',keysOpt);
  			}
			
   			console.log( "ready!" );
   			overridePageMessages();
		});	
					        
	    function overridePageMessages(){    
	        var textureEffect = '';
	        textureEffect = 'slds-theme--alert-texture';
	        $('.warningM3').addClass('slds-notify slds-notify--toast slds-theme--warning customMessage '+textureEffect);          
	        $('.confirmM3').addClass('slds-notify slds-notify--alert slds-theme--success customMessage '+textureEffect);    
	        $('.errorM3').addClass('slds-notify slds-notify--alert slds-theme--error customMessage '+textureEffect);                  
	        $('.infoM3').addClass('slds-notify slds-notify--toast customMessage '+textureEffect);    
	        $('.btn').removeClass('btn');                 
	        $('.errorM3').removeClass('errorM3'); 
	        $('.confirmM3').removeClass('confirmM3'); 
	        $('.infoM3').removeClass('infoM3');   
	        $('.warningM3').removeClass('warningM3');  
	    }	
	    			

		var counter = 6;
		function validateHSettings(b){
			counter = 6;
			showMessageJS('Validating connection to Heroku...','INFO');
			console.log('calling..');
			checkConnection();
		}
		
		function callback(status,msg){
			counter--;
			console.log('status'+status);
			console.log('counter:'+counter);
			if (status == 'Fail'){
				showMessageJS('Flosum did not receive back any data from Heroku. Try to generate the authorization token once again and update Heroku service with it.','ERROR');
			}else if (counter < 0){
				showMessageJS('Flosum did not receive back any data from Heroku. Try to generate the authorization token once again and update Heroku service with it.','ERROR');
			}else if (status == 'Success'){
				showMessageJS('Heroku service is tuned up','CONFIRM');
			}else{
				setTimeout(
					function(){
						checkConnection();
					},5000);
			}
			 
		}
		
				
		function saveHSettings(b){
			bShowGitExt = (b == true || b == 'true');
			showMessageJS('Connecting to Heroku...','INFO');
			var creds = {};
			creds.UsernameResource = $('[id$=UsernameResource]').val();
			creds.PasswordResource = $('[id$=PasswordResource]').val();
			creds.AccessPoint = $('[id$=AccessPoint]').val();
			creds.isSync = $('[id$=chkBox1]').is(':checked');

			saveHerokuRecord(JSON.stringify(creds));
		}
				
		function S_GET(id){
 		    var a = new RegExp(id+"=([^&#=]*)");
    		return window.location.search ? decodeURIComponent(a.exec(window.location.search)[1]): '';	
		}
		
		function checkHErrors(flag,message){

			if (flag == true || flag == 'true'){
				showMessageJS(message,'ERROR');
			}else{
				showMessageJS(message,'CONFIRM');
			}
		}
		
		function getTokens(){
			var paramsStr = S_GET('state');
			if (paramsStr != undefined && paramsStr == 'token'){
			}else{// return if page loaded not in usual flow
				return;
			}
			if (access_code != undefined && secret != undefined && secret != '' && key != undefined && key != ''){
				var credential = ' OAuth ' + '{!GETSESSIONID()}'; // native VF function
				var url = login_url + '/services/oauth2/token?grant_type=authorization_code&code=' + access_code +
										'&client_id=' + key + '&client_secret=' + secret + '&redirect_uri=' + redirect_uri;
				
				var postUrl = base_uri + "/services/proxy";
				
				$.ajax( {url: postUrl,
			        type:"POST",
			        cache: false,
			        crossOrigin : true,  
					beforeSend: function(xhr) {
            			xhr.setRequestHeader('SalesforceProxy-Endpoint', url);
            			xhr.setRequestHeader("Authorization", credential);
            			xhr.setRequestHeader('X-User-Agent', 'MyClient');
        			},
         			contentType: 'application/x-www-form-urlencoded',
         			data:'', 
         			success:function(data, textStatus, jqXHR) {

         				if (data != undefined && textStatus === "success"){
         					if (data.refresh_token != undefined && data.instance_url != undefined){
         						var orgType = 'Production';
         						if (login_url === 'https://test.salesforce.com' ) orgType = 'Sandbox';
         						document.getElementById("token").value = (data.refresh_token + ' ' + key + ' ' + secret + ' ' + orgType);
         						console.log('[id$=token]  =  ' + data.refresh_token + ' ' + key + ' ' + secret + ' ' + orgType);
         						//$('[id$=token]').val = (data.refresh_token + ' ' + key + ' ' + secret + ' ' + orgType);
         						showHideElement("tokenArea",true);
		         				showMessageJS(message1,'INFO');
         						return;
         					}
         				}
         				showMessageJS('Authorization error, verify the registraton of Flosum connected application and try to reload this page','ERROR');
         			},
         			error: function(jqXHR, textStatus, errorThrown) {
         				showMessageJS('Authorization error, verify the settings for Flosum connected application and try to reload this page','ERROR');
       				}
				});
			}
		}
		getTokens();
				
		function copyTokenToClipboard(paratext){
			//var existsTextarea = document.getElementById('token');
			console.log(document.getElementById('token'));
			console.log($('[id$=token]'));
			var existsTextarea = $('[id$=token]');
			existsTextarea.select();
			try {
		        var status = document.execCommand('copy');
        		if(!status){
		            console.error("Cannot copy text");
        		}else{
		            console.log("The text is now on the clipboard");
        		}
		    } catch (err) {
        		console.log('Unable to copy.');
    		}
		}

		function selectElementText(el){
			var range = document.createRange(); // create new range object
			range.selectNodeContents(el); // set range to encompass desired element text
			var selection = window.getSelection(); // get Selection object from currently user selected text
			selection.removeAllRanges(); // unselect any user selected text (if any)
			selection.addRange(range); // add range to Selection object to select it
		}
		
		jQuery.validator.addMethod('selectcheck', function (value,element) {
       			return (value != '-- Select one --' && value != null && value != '');
   		}, "This field is required");
   		
   		jQuery.validator.addMethod('hostcheck', function (value,element) {
       			if  (value != null && value != '' && value != undefined){
       				return true;
       			}
       			return false;
   		}, "This field is required");
   		
   		jQuery.validator.addMethod('hostvalid', function (value,element) {
       			if  (value != null && value != '' && value != undefined){
       				if ((''+value).trim().toLowerCase().indexOf('https://')  == 0 ||
       					(''+value).trim().toLowerCase().indexOf('ssh://')  == 0){
       					return false;
       				}
       				return true;
       			}
       			return false;
   		}, "The protocol identifier (https or ssh) in host name is not required");
   		
   		jQuery.validator.addMethod('pathvalid', function (value,element) {
       			if  (value != null && value != '' && value != undefined){
       				var pathStr = (''+value).trim().toLowerCase();
       				return pathStr.endsWith('.git') == false;
       			}
       			return false;
   		}, ".git in the end of path is not required");
   		
   		String.prototype.endsWith = function(suffix) {
   			 return this.indexOf(suffix, this.length - suffix.length) !== -1;
		};
		
		var allForm;
		
		function setRules() {
			allForm = $("#gcRecord").validate();           

    		$('[id$=credsName]').rules("add",{
        		required: true
    		});     
     
    		$('[id$=host]').rules("add",{
        		hostcheck : true,
               	hostvalid : true
    		});     
    
    		$('[id$=path]').rules("add",{
        		required: true,
        		pathvalid: true
    		});

    		$('[id$=repository]').rules("add",{
        		selectcheck: true
    		});
    		
    		$('[id$=key1]').rules("add",{
        		selectcheck: {
               		depends: function(element) { return $('[id$=protocol]').val() == 'SSH'}
            	}
    		});
    		
    		$('[id$=key2]').rules("add",{
        		selectcheck: {
               		depends: function(element) { return $('[id$=protocol]').val() == 'SSH'}
            	}
    		});
    		
    		$('[id$=key3]').rules("add",{
        		required: false
    		});
    		
    		$('[id$=passphrase]').rules("add",{
        		required: {
               		depends: function(element) { return $('[id$=protocol]').val() == 'SSH'}
            	}
    		});
    		
    		$('[id$=username]').rules("add",{
        		required: {
               		depends: function(element) { return $('[id$=protocol]').val() == 'HTTPS'}
            	}
    		});
    		
    		$('[id$=password]').rules("add",{
        		required: {
               		depends: function(element) { return $('[id$=protocol]').val() == 'HTTPS'}
            	}
    		});  
    		  
			jQuery.validator.messages.required = "This field is required";
		}
				
		function showHideElement(path,b){
			console.log('updating tables:'+b);
			if (b){
				$('[id$='+path+']').show();
			}else{
				$('[id$='+path+']').hide();
			}
		}

		function updateShowTable(b){
			showHideElement('GitExt',b);
		}

		function updateShowEditor(b){
			showHideElement('editRecord',b);
		}
		
		function processSettings(section){
			var b = 
			showHideElement('editRecord',b);
		}
		    	
		function checkUncheck(b){
			syncOn = (b == true || b == 'true') ?  true : false;
			// do not do anything if errors
			var isErrors =  '{!bErrors}';
			if (isErrors == true) return;

			showGitCredsTable = true;

			updateShowTable(showGitCredsTable);
			if (!showGitCredsTable)
				updateShowEditor(false);
		}
		
		function showEditor(b){
			updateShowEditor(b);
			updateShowTable(!b);
		}

    	function  showSection(https){
			showHideElement('recordHTTPS', https);
			showHideElement('recordSSH', !https);
			optionHttps = https;
			optionSsh = !https;
   		}
   		
   		function showSets(elem) {
       		var selOption = elem.options[elem.selectedIndex].text;

   			setRules();
           	if ( selOption ==  'HTTPS') {
				showSection(true);
           	}else if ( selOption ==  'SSH')  {
				showSection(false);
           	}
   		}
   		
   		function setKeyOptions(lst){
 		
  		}
  		
  		var keysOpt = [];
		var repoOpt = [];
		
		function setFieldValues(r){
  			if (allForm != undefined){// reset all messages
  				allForm.resetForm();
  			}
  			// do not set nulls !
  			if (r != undefined){
  				// load and set values
  				rec = JSON.parse(r);
  				showSection(rec.protocol == 'HTTPS');
  				setValue('[id$=credsName]', rec.name);
  				setValue('[id$=userName]', rec.username);
  				setValue('[id$=key1]', rec.pub,'Combo');
  				setValue('[id$=key2]', rec.prv,'Combo');
  				setValue('[id$=protocol]', rec.protocol);
  				setValue('[id$=dirName]', rec.dirName);
  				setValue('[id$=format]', rec.format);
  				setValue('[id$=host]', rec.host);
  				setValue('[id$=path]', rec.path);
  				setValue('[id$=password]', rec.password);
  				setValue('[id$=passphrase]', rec.passphrase);
  				setValue('[id$=repository]', rec.localRepo,'Combo');
  				setValue('[id$=key3]', rec.hosts,'Combo');
  				setValue('[id$=chkBox3]', rec.checked, 'Checkbox');
  			}else{// new form
  				showSection(true);
  				rec = {};
  				rec.protocol = 'HTTPS';
  				setValue('[id$=protocol]', rec.protocol);
  				setValue('[id$=chkBox3]', true, 'Checkbox');
  				resetValue('[id$=credsName]');
  				resetValue('[id$=userName]');
  				resetValue('[id$=key1]');
  				resetValue('[id$=key2]');
  				resetValue('[id$=format]','Standard');
  				resetValue('[id$=dirName]');
//  				resetValue('[id$=protocol]', 'HTTPS');
  				resetValue('[id$=host]');
  				resetValue('[id$=path]');
  				resetValue('[id$=password]');
  				resetValue('[id$=passphrase]');
  				resetValue('[id$=repository]');
  				resetValue('[id$=key3]');
  			}
  		}
  		
  		function setValue(id,v, elem){
  			if ($(id) != undefined && v != undefined && v != null){
  				if (elem == 'Checkbox'){
  					$(id).prop("checked", v);
  				}else if (elem == 'Combo'){
  					if (v != null && v != undefined){
	  					$(id).val(v);
  					}else{
  						$(id).val('');
  					}
  				}else{
  					$(id).val(v);
  				}
  			}
  		}
				
		function resetValue(id, v){
  			if ($(id) != undefined){
  				if (v != undefined){
  					$(id).val(v);
  				}else{
  					$(id).val('');
  				}
  			}
  		}
  		
  		function createObjectsOptionLi(Id, selOpt, optList) {
	    	if (optList != undefined && ($(Id) != undefined)){
	    		$(Id).append('<option selected="selected" value>-- Select one --</option>');
           			for (var x = 0; x < optList.length; x++){
	   					$(Id).append('<option value="' + optList[x].val + '">' + optList[x].name + '</option>');
           			}
   			}
  		}
  		
  		var rec = {};	
		var dialog = $( "#dialog-form" ).dialog({
			autoOpen: false,
			width: 500,
			modal: true,
			buttons: {
				"Save": saveBtn,
				Cancel: function() {
					dialog.dialog( "close" );
					refresh();
				}
			},
			close: function() {
				console.log('calling close');
				refresh();
			}
		});

		var form = dialog.find( "form" ).on( "submit", function( event ) {
			event.preventDefault();
			console.log('submit form');
			processInputData();
		});
		
		function openEditor(repo,keys,r){

			showEditor2(true);
			clearAllMessages();
			setFieldValues(repo,keys,r);
			setRules();
		}
		
		function showEditor2(b){
			if (b == true){
				dialog.dialog( "open" );
			}else{
				dialog.dialog( "close" );
			}
		}
		
		function saveBtn(){
			processInputData();
		}
				
		function checkErrors(err,msg){
			console.log('err='+err);
			if (err == 'true' || err == true){
				showMessageJS(msg,'ERROR','[id$=loadingMsg]');
				return;
			}
			showMessageJS(msg,'CONFIRM');
			showEditor2(false);
		}
		
		function processInputData(){
			console.log('submit event');
			var form = $('[id$=gcRecord]');
			if (form && form.valid()){
				console.log('formally valid, validating on  the server');
        		showMessageJS('Please wait, validating credentials...','INFO','[id$=loadingMsg]');
        		var validRecord = {};
        		validRecord.name = $('[id$=credsName]').val();
        		validRecord.protocol = $('[id$=protocol]').val();
        		validRecord.host = $('[id$=host]').val();
        		validRecord.path = $('[id$=path]').val();
        		validRecord.localRepo = $('[id$=repository]').val();
        		validRecord.password = $('[id$=password]').val();
        		validRecord.passphrase = $('[id$=passphrase]').val();
        		validRecord.username = $('[id$=userName]').val();
        		validRecord.pub = $('[id$=key1]').val();
        		validRecord.prv = $('[id$=key2]').val();
        		validRecord.hosts = $('[id$=key3]').val();
        		validRecord.dirName = $('[id$=dirName]').val();
        		validRecord.format = $('[id$=format]').val();
        		
        		validRecord.checked =   $('[id$=chkBox3]').is(':checked');
        		purify(validRecord);
        		var strRec = JSON.stringify(validRecord);
        		
        		saveRecord(strRec);
        	}else{// do nothing
				console.log('invalid data');
        	}
		}
		
		/*			Utility functions 		*/
		
		function purify(obj){
			for (var v in obj){
				if (obj.hasOwnProperty(v)){
					if (obj[v] == '-- Select one --'){
						obj[v] = null;
					}
				}
			}
		}
		
		function clearAllMessages()
		{
        	var parentVal = $("[id$='msg']");
			if(parentVal != undefined)
			{
			    parentVal.html('');
			}
        	var parentVal = $("[id$='loadingMsg']");
			if(parentVal != undefined)
			{
			    parentVal.html('');
			}
		}
		
		function showMessageJS(Message_Str,Message_Type,formId)
		{
        	var parentVal = $("[id$='msg']");
            var defaultMsgEM3 = '<div class="message warningM3 slds-notify slds-notify--alert slds-theme--warning" role="alert">';
            var defaultMsgIM3 = '<div class="message infoM3 slds-notify slds-notify--toast slds-theme--info" role="alert">'
            var defaultMsgCM3 = '<div class="message confirmM3 slds-notify slds-notify--alert slds-theme--success" role="alert">';
            var textStyle = '"color:#fff;"';
        	if (formId != undefined){
        		parentVal = $(formId);
	            textStyle = '"color:#000;"';
        	}
            console.log(formId);
			if(parentVal != undefined)
			{
			    parentVal.html('');
			    if(Message_Str != '')
			    {
				    if(Message_Type == 'ERROR')
				    {
				    	var childVal = '<span id="j_id0:msg:j_id19:j_id20:0:j_id21">'+
										defaultMsgEM3 +
											'<table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">'+
												'<tbody>'+
													'<tr valign="top">'+
														/*'<td><img alt="ERROR" class="msgIcon" src="/s.gif" title="ERROR"></td>'+*/
														'<td class="messageCell">'+
															'<div id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id24" class="messageText">'+
																'<span id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id25" style="color:#cc0000">'+
																	'<h4>Error:</h4>'+
																	'<font style="color:#000;">'+Message_Str+'</font>'+
																	'<br>'+
															'</div>'+
														'</td>'+
													'</tr>'+
													'<tr>'+
														'<td></td>'+
														'<td></td>'+
													'</tr>'+
												'</tbody>'+
											'</table>'+
										'</div>'+
									'</span>';
						parentVal.append(childVal);
				    }
				    else if(Message_Type == 'INFO')
				    {
						var childVal = '<span id="j_id0:msg:j_id19:j_id20:0:j_id21">'+
											defaultMsgIM3 +
												'<table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">'+
													'<tbody>'+
														'<tr valign="top">'+
															/*'<td><img alt="INFO" class="msgIcon" src="/s.gif" title="INFO"></td>'+*/
															'<td class="messageCell">'+
																'<div id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id24" class="messageText">'+
																	'<span id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id25">'+
																		'<h4></h4>'+
																	'</span>'+
																	'<font style='+textStyle+'>'+Message_Str+'</font>'+
																	'<br>'+
                            									'</div>'+
															'</td>'+
														'</tr>'+
														'<tr>'+
															'<td></td>'+
															'<td></td>'+
														'</tr>'+
													'</tbody>'+
												'</table>'+
											'</div>'+
										'</span>';
						parentVal.append(childVal);
					}
					else if(Message_Type == 'CONFIRM')
				    {
						var childVal = 	'<span id="j_id0:msg:j_id15:j_id16:0:j_id17">'+
											defaultMsgCM3 +
												'<table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">'+
													'<tbody>'+
														'<tr valign="top">'+
															/*'<td><img alt="CONFIRM" class="msgIcon" src="/s.gif" title="CONFIRM"></td>'+*/
															'<td class="messageCell">'+
																'<div id="j_id0:msg:j_id15:j_id16:0:j_id17:j_id18:j_id20" class="messageText">'+
																	'<span id="j_id0:msg:j_id15:j_id16:0:j_id17:j_id18:j_id21" style="color:#fff;">'+
																		'<h4>Success:</h4>'+
																	'</span>'+
																	'<font style="color:#fff;">'+Message_Str+'</font>'+
																	'<br>'+
																'</div>'+
															'</td>'+
														'</tr>'+
														'<tr>'+
															'<td></td>'+
															'<td></td>'+
														'</tr>'+
													'</tbody>'+
												'</table>'+
											'</div>'+
										'</span>';
						parentVal.append(childVal);
					}
				}
			}
		}
    </script>
</apex:page>