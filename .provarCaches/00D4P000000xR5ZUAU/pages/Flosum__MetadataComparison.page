<apex:page controller="Flosum.MetadataComparisonController" sidebar="false" doctype="html-5.0" tabStyle="Snapshot_Comparison__tab">
    <c:TrackPanel />
    <c:Wait />
    <c:CommitToPatch />
    <c:DynamicLookupScript />
    <apex:slds />
    <apex:includeScript value="{!URLFOR($Resource.Flosum__Utility, 'JS/angular.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.Flosum__jszipmaster, 'jszip-master/dist/jszip.js')}"/>
    <apex:includeScript value="{!$Resource.Flosum__xmltojson}"/>
    <apex:includeScript value="{!$Resource.Flosum__X2JS}"/>
    <apex:includeScript value="{!URLFOR($Resource.Flosum__uisetup, '/js/jquery-ui.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.Flosum__uisetup, '/css/jquery-ui.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.Flosum__ContentEditor, 'beauty/forMatXML.js')}"/>
    
    <style>
        div .pagination {
            text-align: center;
        }
        [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
          display: none !important;
        }
        .red {
            background-color:rgba(255, 158, 158, 0.65);
        }
        .yellow {
            background-color:rgba(252, 252, 164, 1);
        }
        a.redirectLinkForSnapComparison {
            float: right;
        }
        input.addToPatchButton {
            margin-left: 5px;
        }
        .slds-scope .slds-table td, .slds-scope .slds-table th {
        	padding: 0rem !important;
       	}
        .customMessage * {
            color: #fff!important
        }
        .customMessage {
   			margin: 0px !important;
			opacity: 1!important;
			width: 100%;
			font-size: 13px;
			border: 0px;
			padding-left: 10px;
		}
        .message {
            opacity: 0;
        }
        .lbcls{
            font-weight: 700 !important;
        }
        .pageBtnMargin {
        	Margin-right: 1% !important;
        }
        .btnMargin {
        	margin-bottom: 5px !important;
        }
        .topMargin {
        	margin-top: -10px !important;
        }
        .patchTopMargin {
        	margin-top: 15px !important;
        }
        .profileCompLink{
            float: right;
        }
    </style>
    
    <div class="slds-scope">
        <div class="myapp">
        	<apex:pagemessages id="msg"/>
        	<div class="slds-page-header">
		        <div class="slds-media__body">
		            <h1 class="slds-page-header__title slds-truncate slds-align-middle" title="Comparison">Comparison</h1>
		        </div>
	        </div>
            <apex:form styleClass="slds-form--stacked" id="form">
                <div ng-app="SnapRepoCompare">
                	<div ng-controller ="RepositoryComparisonController" id="angularControllerId">
                    	<div class="ng-cloak">
		                    <apex:actionfunction name="addToPatchItems" action="{!createPatch}" rerender="msg" onComplete=" overridePageMessages();hide(); createPatchManifestItem({!IsFromRepository},'{!JSENCODE(compHistoryIdJSON)}','{!JSENCODE(metaIdJSON)}','{!JSENCODE(patchId)}');" >
		                        <apex:param assignTo="{!historyIdJSON}" value="" name="historyIdJSON"/>
		                        <apex:param assignTo="{!metadataItemIdJSON}" value="" name="metadataItemIdJSON"/>
		                    </apex:actionfunction>
		                    <apex:actionfunction name="viewDetails" action="{!viewDetail}" onComplete="hide(); redirectToDetailPage('{!JSENCODE(detailPageURL)}');" rerender="msg" >
		                        <apex:param assignTo="{!sourceTargetIdJSON}" value="" name="sourceTargetIdJSON"/>
		                    </apex:actionfunction>
		                    <apex:actionFunction name="listSourceSnapshotComponents" action="{!listComponentTypes}" reRender="comType,allCompareBlock,msg" onComplete="hide();" />
		                    <apex:actionFunction name="refreshPatchesList" reRender="nameBlock,msg" onComplete="hide();" />		                    
		                    <fieldset class="slds-box slds-theme--default" id="allCompareBlock">
		                    <apex:outputLink value="/apex/{!$Setup.Flosum__Credentials__c.Flosum__Namespace__c}profileComparison" styleClass="profileCompLink">Click here to compare profile</apex:outputLink>
		                        <apex:outputPanel layout="block" styleClass="slds-form--stacked" id="pBlock">
		                            <apex:outputPanel styleClass="slds-m-top_small slds-grid slds-size--12-of-12" layout="block">
		                                <apex:outputPanel styleClass=" slds-size_4-of-12" >
		                                    <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Source :" />
		                                    <div class="slds-form-element__control">
		                                        <div class="slds-select_container">
		                                            <apex:selectList value="{!selectedSourceOption}" multiselect="false" size="1" styleClass="slds-select slds-text-heading_regular disableitem" id="selectedSourceOption">
			                                            <apex:selectOptions value="{!sourceOptions}"/>
			                                            <apex:actionSupport event="onchange" action="{!onSelectSourceOption}" onSubmit="show();hidePagination();" reRender="comType,snapLookUpSource,respoOrg,allCompareBlock,msg" onComplete="hide();" />
		                                            </apex:selectList>
		                                        </div>
		                                    </div>
		                                </apex:outputPanel>
                                		<apex:outputPanel styleClass=" slds-size_3-of-12 slds-p-right_small"/>
		                                <apex:outputPanel styleClass=" slds-size_4-of-12" >
		                                    <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Target :" />
		                                    <div class="slds-form-element__control">
		                                        <div class="slds-select_container">
		                                            <apex:selectList value="{!selectedTargetOption}" multiselect="false" size="1" styleClass="slds-select slds-text-heading_regular disableitem" id="selectedTargetOption">
			                                            <apex:selectOptions value="{!targetOptions}"/>
			                                            <apex:actionSupport event="onchange" action="{!onSelectTargetOption}" onSubmit="show();hidePagination();" reRender="comType,snapLookUpSource,respoOrg,allCompareBlock,msg" onComplete="hide();" />
			                                        </apex:selectList>
		                                        </div>
		                                    </div>
		                                </apex:outputPanel>
		                            </apex:outputPanel>
		                            <apex:outputPanel id="respoOrg" styleClass="slds-m-top_small slds-grid slds-size--12-of-12" layout="block">
		                                <apex:outputPanel styleClass=" slds-size_4-of-12" rendered="{!selectedSourceOption == 'Repository' && sourceRepositoryOptions.size > 0}" >
		                                    <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Repository :" />
		                                    <div class="slds-form-element__control">
		                                        <div class="slds-select_container">
		                                            <apex:selectList value="{!selectedSourceRepository}" multiselect="false" size="1" styleClass="slds-select slds-text-heading_regular disableitem" id="selectedSourceRepository">
		                                                <apex:selectOptions value="{!sourceRepositoryOptions}"/>
		                                                <apex:actionSupport event="onchange" action="{!listComponentTypes}" onSubmit="show();hidePagination();" reRender="nameBlock,comType,allCompareBlock,msg" onComplete="hide();" />
		                                            </apex:selectList>
		                                        </div>
		                                    </div>
		                                </apex:outputPanel>
		                                <apex:outputPanel styleClass=" slds-size_4-of-12" rendered="{!selectedSourceOption == 'Snapshot' && sourceOrgOptions.size > 0}">
		                                	<apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Organization :" />
		                                    <div class="slds-form-element__control">
		                                        <div class="slds-select_container">
		                                            <apex:selectList value="{!selectedSourceOrg}" multiselect="false" size="1" styleClass="slds-select slds-text-heading_regular disableitem" id="selectedSourceOrg">
			                                            <apex:selectOptions value="{!sourceOrgOptions}"/>
			                                            <apex:actionSupport event="onchange" action="{!listSourceSnapshot}" onSubmit="show();hidePagination();" reRender="nameBlock,snapLookUpSource,comType,allCompareBlock,msg" onComplete="hide();" />
			                                        </apex:selectList>
		                                        </div>
		                                    </div>
		                                </apex:outputPanel>
	                                	<apex:outputPanel styleClass=" slds-size_3-of-12 slds-p-right_small">
	                                </apex:outputPanel>
	                                <apex:outputPanel styleClass=" slds-size_4-of-12" rendered="{!selectedTargetOption == 'Repository' && targetRepositoryOptions.size > 0}">
	                                    <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Repository :" />
	                                    <div class="slds-form-element__control">
	                                        <div class="slds-select_container">
	                                           <apex:selectList value="{!selectedTargetRepository}" multiselect="false" size="1" styleClass="slds-select slds-text-heading_regular disableitem" id="selectedTargetRepository">
		                                           <apex:selectOptions value="{!targetRepositoryOptions}"/>
		                                           <apex:actionSupport event="onchange" action="{!listComponentTypes}" onSubmit="show();hidePagination();" reRender="nameBlock,comType,allCompareBlock,msg" onComplete="hide();" />
		                                        </apex:selectList>
	                                        </div>
	                                    </div>
	                                </apex:outputPanel>
	                                <apex:outputPanel styleClass=" slds-size_4-of-12" rendered="{!selectedTargetOption == 'Snapshot' && targetOrgOptions.size > 0}">
	                                    <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Organization :" />
	                                    <div class="slds-form-element__control">
	                                        <div class="slds-select_container">
	                                           <apex:selectList value="{!selectedTargetOrg}" multiselect="false" size="1" styleClass="slds-select slds-text-heading_regular disableitem" id="selectedTargetOrg">
		                                           <apex:selectOptions value="{!targetOrgOptions}"/>
		                                           <apex:actionSupport event="onchange" action="{!listTargetSnapshot}" onSubmit="show();hidePagination();" reRender="comType,nameBlock,snapLookUpSource,allCompareBlock,msg" onComplete="hide();" />
		                                        </apex:selectList>
	                                        </div>
	                                    </div>
	                                </apex:outputPanel>
	                            </apex:outputPanel>
	                            <apex:outputPanel styleClass="slds-m-top_small slds-grid slds-size--12-of-12" layout="block" id="snapLookUpSource">
	                                <apex:outputPanel styleClass="slds-size_4-of-12"  rendered="{!selectedSourceOption == 'Snapshot' && selectedSourceOrg == ''}"/>
	                                <apex:outputPanel styleClass="slds-size_4-of-12"  rendered="{!selectedSourceOption == 'Repository' && selectedSourceRepository == ''}"/>
                                 	<apex:outputPanel styleClass="slds-size_4-of-12"  rendered="{!selectedSourceOption == 'Repository' && selectedSourceRepository != ''}"/>
                                	<apex:outputPanel styleClass="slds-size_4-of-12"  rendered="{!selectedSourceOption == 'Snapshot' && selectedSourceOrg != ''}">
		                                <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Snapshot :" />
	                                    <div class="slds-form-element__control slds-grid">
	                                        <apex:inputHidden id="selectedSourceSnapshot" value="{!selectedSourceSnapshot}"/>
	                                        <div class="slds-size--1-of-2">
	                                            <apex:inputText size="25" value="{!selectedSourceSnapshotLabel}" id="sourceSnapshotName" onFocus="this.blur()" disabled="false" html-callitafterchange="hidePaginationData" styleClass="slds-input slds-text-heading_regular"/> 
	                                        </div>
	                                        <div class="slds-size--1-of-2">
	                                            <img style="height: 45%;margin-left: 2%;margin-top: 3px;" src="{!URLFOR($Asset.SLDS, 'assets/icons/utility/search_60.png')}" 
	                                                onclick="dlm_openLookupPopup('{!$Component.sourceSnapshotName}','{!$Component.selectedSourceSnapshot}','{!$ObjectType.Snapshot__c.Name}',
	                                                '{!$ObjectType.Snapshot__c.fields.Organisation__c.Name} =\'{!selectedSourceOrg}\''); return false" 
	                                                class="disableitem"/>
	                                        </div>
	                                    </div>
	                                </apex:outputPanel>
	                                <apex:outputPanel styleClass=" slds-size_3-of-12 ">
	                                    <span></span>
	                                </apex:outputPanel>
                                	<apex:outputPanel styleClass="slds-size_4-of-12"  rendered="{!selectedTargetOption == 'Snapshot' && selectedTargetOrg == ''}"/>
	                                <apex:outputPanel styleClass="slds-size_4-of-12 slds-float--right"  rendered="{!selectedTargetOption == 'Snapshot' && selectedTargetOrg != ''}">
	                                    <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Snapshot :" />
	                                    <div class="slds-form-element__control slds-grid">
	                                        <apex:inputHidden id="selectedTargetSnapshot" value="{!selectedTargetSnapshot}"/>
	                                        <div class="slds-size--1-of-2">
	                                            <apex:inputText size="25" value="{!selectedTargetSnapshotLabel}" id="targetSnapshotName" onFocus="this.blur()" disabled="false" html-callitafterchange="hidePaginationData" styleClass="slds-input slds-text-heading_regular"/> 
	                                        </div>
	                                        <div class="slds-size--1-of-2">
	                                            <img style="height: 45%;margin-left: 2%;margin-top: 3px;" src="{!URLFOR($Asset.SLDS, 'assets/icons/utility/search_60.png')}" 
			                                        onclick="dlm_openLookupPopup('{!$Component.targetSnapshotName}','{!$Component.selectedTargetSnapshot}','{!$ObjectType.Snapshot__c.Name}',
			                                        '{!$ObjectType.Snapshot__c.fields.Organisation__c.Name} =\'{!selectedTargetOrg}\''); return false" 
			                                        class="disableitem"/>
	                                        </div>
	                                    </div>
	                                </apex:outputPanel>
                            	</apex:outputPanel>
                            	<apex:outputPanel id="comType">
	                                <apex:outputPanel styleClass="slds-m-top_small slds-grid slds-size--12-of-12 topMargin" rendered="{!componentTypeOptions.size > 0}" layout="block" >
	                                    <apex:outputPanel styleClass="slds-size_4-of-12">
	                                        <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Component Type :" />
	                                        <div class="slds-form-element__control">
	                                            <div class="slds-select_container">
	                                                <apex:selectList value="{!selectedComponentType}" multiselect="false" size="1" styleClass="slds-select slds-text-heading_regular disableitem" id="selectedComponentType">
		                                                <apex:selectOptions value="{!componentTypeOptions}"/>
		                                                <apex:actionSupport event="onchange" onSubmit="show();hidePagination();" reRender="allCompareBlock,msg"  onComplete="startComparison('{!JSENCODE(selectedComponentType)}');" />
		                                            </apex:selectList>
	                                            </div>
	                                        </div>
	                                    </apex:outputPanel>
	                                </apex:outputPanel>
                                </apex:outputPanel>
	                            <apex:outputPanel id="nameBlock" styleClass="slds-m-top_small" html-ng-show="paginationList.length > 0"><!--  -->
	                                <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12 patchTopMargin" layout="block" >
	                                    <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Deployment :" />
	                                        <div class="slds-form-element__control slds-grid">
	                                            <apex:inputHidden id="patchTargetId" value="{!selectedPatch}"/>
	                                            <div class="slds-size--1-of-2">
	                                                <apex:inputText size="25"  id="patchTargetName" onFocus="this.blur()" disabled="false" styleClass="slds-input slds-text-heading_regular" html-callitafterchange="refreshPatchesList"/>
	                                            </div>
	                                            <div class="slds-size--1-of-2">
	                                                <img style="height: 45%;margin-left: 2%;margin-top: 3px;" src="{!URLFOR($Asset.SLDS, 'assets/icons/utility/search_60.png')}" 
		                                                onclick="dlm_openLookupPopup('{!$Component.patchTargetName}','{!$Component.patchTargetId}','{!$ObjectType.Patch__c.Name}',''); return false" 
		                                                class="disableitem"/>
	                                            </div>
	                                        </div>
	                                    </apex:outputPanel>
			                            <apex:outputPanel styleClass="slds-form-element slds-size--4-of-12 topMargin" layout="block" rendered="{!If(selectedPatch == null || selectedPatch == '',true,false)}">
			                                <apex:outputLabel styleClass="lbcls slds-form-element__label slds-text-heading_regular" value="Deployment Name :" />
			                                <div class="slds-form-element__control">
			                                    <apex:InputText styleClass="slds-input slds-text-heading_regular disableitem" value="{!patchName}"/>
			                                </div>
			                            </apex:outputPanel>
			                        </apex:outputPanel>
			                    </apex:outputPanel>
			                    <apex:outputPanel styleClass="slds-m-top_small slds-form-element " layout="block">
	                                <div id="progressbar" class="flpbar"></div>
	                            </apex:outputPanel>
	                    		<apex:outputPanel styleClass="slds-m-top_large slds-form-element" html-ng-show="paginationList.length > 0" layout="block">
	                                <div class="slds-form-element__control">
	                                    <span class="slds-checkbox slds-float--left" style="margin-top: 10px;">
	                                        <apex:inputCheckbox html-ng-click="selectDeselectAll(isAllSelected,paginationList)" styleclass="asli slds-input" id="checkbox-2" html-ng-model="isAllSelected"/>
	                                        <apex:outputLabel for="checkbox-2" styleClass="lbcls slds-checkbox__label">
	                                            <span class="slds-checkbox--faux"></span>
	                                            <span class="slds-form-element__label">Select / Deselect All</span>
	                                        </apex:outputLabel>
	                                    </span>
	                                    <div class="slds-float--right btnMargin" role="group">
		                                    <apex:commandbutton value="View Detail" onClick="show(); return false;" html-ng-click="viewDetails();" reRender="msg" styleClass="slds-button slds-button_neutral disableitem" oncomplete="overridePageMessages();"/>
		                                    <apex:commandbutton value=" Add to Deployment" onClick="return false;" html-ng-click="createPatchFromSelected();" reRender="msg" styleClass="slds-button slds-button_neutral addToPatchButton disableitem"/>
		                                </div>
	                                </div>
	                            </apex:outputPanel>
                    			<apex:outputPanel layout="block" id="tb" styleClass="slds-m-top_small" html-ng-show="paginationList.length > 0">
                                    <table columnClasses="slds-truncate" ng-show="paginationList.length > 0"  Class="slds-table slds-table_bordered slds-table_cell-buffer list">
                                        <thead>
                                            <tr class="headerRow">
                                                <th scope="col">
                                                    <div class=" slds-truncate slds-th__action slds-th__action_form">
                                                        <label class="slds-checkbox">
                                                        	<input type="checkbox" ng-click="checkItemAll(isAllChecked,(paginationList| orderBy: orderByColumn :isReverse | limitTo: viewLimit),metaOffSet);" class="slds-input psli" ng-model="isAllChecked" />
                                                        	<span class="slds-checkbox_faux"></span>
                                                        	<span class="slds-assistive-text"></span>
                                                        </label>
                                                    </div>
                                                </th>
	                                            <th ng-repeat = "(key, value) in fieldSet">
	                                                {{fieldName = key == 'changedOn' ? 'LastModifiedDate' : key; ""}}
	                                                {{fieldName = fieldName == 'targetChangedOn' ? 'targetLastModifiedDate' : fieldName; ""}}
	                                                
	                                                {{fieldLabel = fieldName == 'LastModifiedDate' ? value+' ('+sourceName+')' : value; ""}}
	                                                {{fieldLabel = fieldName == 'targetLastModifiedDate' ? fieldLabel+' ('+targetName+')' : fieldLabel; ""}}
	                                                
	                                                {{fieldLabel = orderByColumn == fieldName ? isReverse ? fieldLabel+' ▼' : fieldLabel+' ▲' : fieldLabel; ""}}
	                                                <a ng-click="refreshOrderBy(fieldName)">{{ fieldLabel }}</a>
	                                            </th>
	                                        </tr>
	                                    </thead>
	                                    <tbody>
	                                        <tr ng-repeat = "meta in paginationList | orderBy: orderByColumn :isReverse | limitTo: viewLimit" ng-if="$index >= metaOffSet" class="{{meta.rowType == 'BothSide' ? 'dataRow yellow' : 'dataRow red'}}" onmouseover="if (window.hiOn){hiOn(this);} " onmouseout="if (window.hiOff){hiOff(this);} " on-finish-render="ngRepeatFinished">
	                                            <td scope="row">
	                                                <div class="slds-truncate slds-th__action slds-th__action_form">
	                                                    <label class="slds-checkbox">
	                                                    	<input type="checkbox" class="slds-input sli" ng-click="checkUnCheck((paginationList | orderBy: orderByColumn :isReverse | limitTo: viewLimit),metaOffSet);" ng-model="meta.checked"/>
	                                                    	<span class="slds-checkbox_faux"></span>
	                                                    	<span class="slds-assistive-text"></span>
	                                                    </label>
	                                                </div>
	                                            </td>
	                                            <td scope="row" ng-repeat = "(key, value) in fieldSet">
	                                                        {{ meta[key] }}
	                                            </td>
	                                        </tr>
	                                    </tbody>
	                                </table>
                            	</apex:outputPanel>
                             	<apex:outputPanel html-ng-show="paginationList.length > 0" layout="block" styleClass="pagination slds-m-top--medium slds-grid slds-wrap slds-grid--pull-padded">
	                                <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3">
	                                	<apex:commandbutton styleClass="btn slds-button slds-button_neutral slds-float_right" html-ng-click="listPrevious();" onClick="return false;" value="Previous" reRender="none" html-ng-disabled="isPrevious();"/>
	                                    <apex:commandbutton styleClass="btn slds-button slds-button_neutral slds-float_right pageBtnMargin" html-ng-click="showFirst();" onClick="return false;" value="First" reRender="none" html-ng-disabled="isPrevious();"/>
	                                </div>
	                                <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3">
	                                    Total {{(paginationList).length}} components, Page {{currentPageNo((paginationList).length)}} of {{totalPageCount((paginationList).length)}}
	                                </div>
	                                <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3">
	                                     <apex:commandbutton styleClass="btn slds-button slds-button_neutral slds-float_left" html-ng-click="listNext((paginationList).length);" onClick="return false;" value="Next" reRender="none" html-ng-disabled="isNext((paginationList).length);"/>
	                                    <apex:commandbutton styleClass="btn slds-button slds-button_neutral slds-float_left" html-ng-click="showLast((paginationList).length);" onClick="return false;" value="Last" reRender="none" html-ng-disabled="isNext((paginationList).length);"/>
	                                </div>
                            	</apex:outputPanel>
			                </fieldset>  
			            </div>
			        </div>
			    </div>
            </apex:form>
        </div>
    </div>
   
    <script>
        Visualforce.remoting.timeout = 120000;
        var selectedSourceOption;
        var selectedTargetOption;
        var selectedSourceRepository;
        var selectedTargetRepository;
        var selectedSourceOrg;
        var selectedTargetOrg;
        var selectedSourceSnapshot;
        var selectedTargetSnapshot;
        var selectedComponentType;
        var sourceName;
        var targetName;
        
        var sourceItems = [];
        var targetItems = [];
        var attachmentIdMap = {};
        var currentAttIds = [];
        var currentAttIndex = 0;
        var snapshotCrcMap = {};
        var normalZip = new JSZip();
        
        var mmap = new Object();
        mmap['CustomField'] = true;
        mmap['CustomLabel'] = true;
        mmap['CompactLayout'] = true;
        mmap['WebLink'] = true;
        mmap['RecordType'] = true;
        mmap['ListView'] = true;
        mmap['FieldSet'] = true;
        mmap['AssignmentRule'] = true;
        mmap['AutoResponseRule'] = true;
        mmap['ValidationRule'] = true;
        mmap['WorkflowTask'] = true;
        mmap['WorkflowOutboundMessage'] = true;
        mmap['WorkflowFieldUpdate'] = true;
        mmap['WorkflowKnowledgePublish'] = true;
        mmap['WorkflowAlert'] = true;
        mmap['WorkflowRule'] = true;
        
        mmap['SharingOwnerRule'] = true;
        mmap['SharingCriteriaRule'] = true;
        mmap['BusinessProcess'] = true;
        mmap['SharingReason'] = true;
        mmap['EscalationRule'] = true;
        mmap['MatchingRule'] = true;
        mmap['ManagedTopic'] = true;
        
        var folderMap = new Object();
        folderMap['DocumentFolder'] = 'Document';
        folderMap['DashboardFolder'] = 'Dashboard';
        folderMap['ReportFolder'] = 'Report';
        folderMap['EmailFolder'] = 'EmailTemplate';
        
        var bundleTypes = {};
        bundleTypes['AuraDefinitionBundle'] = 'AuraDefinitionBundle';
        bundleTypes['LightningComponentBundle'] = 'LightningComponentBundle';
                
        var myApp = angular.module("SnapRepoCompare", []);
        myApp.controller("RepositoryComparisonController", ['$scope', function($scope) {
            //Pagination variables.
            $scope.sourceName = '';
            $scope.targetName = '';
            $scope.paginationList = [];
            $scope.orderByColumn = 'componentName';
            $scope.isReverse = false;
            $scope.metaOffSet = 0;
            $scope.staticLimit = 20;
            $scope.viewLimit = $scope.staticLimit;
            var tempObj = {};
            //tempObj['id'] = 'Id';
            tempObj['type'] = 'Component Type';
            tempObj['fullName'] = 'Component Name';
            tempObj['changedOn'] = 'Changed On';
            tempObj['targetChangedOn'] = 'Changed On';
            $scope.fieldSet = tempObj;
            $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
                var checkboxes = document.getElementsByClassName('sli');
                if(checkboxes != undefined && checkboxes.length > 0)
                {
                    var allUnChecked = true;
                    var allChecked = true;
                    for(var i = 0; i < checkboxes.length; i++) 
                    {
                        if(checkboxes[i].type == 'checkbox' && checkboxes[i].checked) 
                        {
                            allUnChecked = false;
                        }
                        else if(checkboxes[i].type == 'checkbox' && !checkboxes[i].checked)
                        {
                            allChecked = false;
                        }
                    }
                    if(allChecked)
                    {
                        var parentCheckboxes = document.getElementsByClassName('psli');
                        if(parentCheckboxes != undefined && parentCheckboxes.length > 0)
                        {
                            parentCheckboxes[0].checked = true;
                        }
                    }
                    else if(allUnChecked || (!allUnChecked && !allChecked))
                    {
                        var parentCheckboxes = document.getElementsByClassName('psli');
                        if(parentCheckboxes != undefined && parentCheckboxes.length > 0)
                        {
                            parentCheckboxes[0].checked = false;
                        }
                    }
                }
                //you also get the actual event object
                //do stuff, execute functions -- whatever...
            });
            /*$scope.showCompareLink = function(idOne,IdTwo){
                var result = idOne != undefined && IdTwo != undefined;
                return result;
            };
            $scope.callCompare = function(idOne,IdTwo){
                OpenInNewTab(viewDetailUrl+'?branchCompHisId='+idOne+'&metaId='+IdTwo+'&fromMerge=fromCommit');
            };*/
            $scope.clearPagination = function() {
                $scope.$apply(function() {
                    $scope.paginationList = [];
                    $scope.isAllSelected = false;
                    $scope.isAllChecked = false;
                });
            };
            
            $scope.showPagination = function(tempLi) {
                $scope.$apply(function() {
                	$scope.sourceName = sourceName;
                	$scope.targetName = targetName;
                    $scope.metaOffSet = 0;
                    $scope.viewLimit = $scope.staticLimit;
                    $scope.orderByColumn = 'componentName';
                    $scope.isReverse = false;
                    var tempObj = {};
                    tempObj['type'] = 'Component Type';
                    tempObj['fullName'] = 'Component Name';
                    tempObj['changedOn'] = 'Changed On';
                    tempObj['targetChangedOn'] = 'Changed On';
                    $scope.fieldSet = tempObj;
                    $scope.paginationList = tempLi;
                    var pb = $("#progressbar");
                    if(pb != undefined)
                        pb.progressbar( "destroy" );
                    if($scope.paginationList.length == 0)
                        setInfoMessageOnPage('No different components found.');
                    enableFlosumUI();
                });
            };
            
            $scope.checkItemAll = function(isAllChecked,compLi,offset) {
                 for(var index = offset ; index < (offset+$scope.staticLimit) && index < compLi.length  ; index++) {
                    if(isAllChecked)
                        compLi[index].checked = true;
                    else
                        compLi[index].checked = false;  
                 }
            };
            
            $scope.selectDeselectAll = function(isAllSelected,compLi) {
            	var parentCheckboxe = document.getElementsByClassName('psli');
            	parentCheckboxe[0].checked = isAllSelected;
            	for(var index = 0 ; index < compLi.length  ; index++) {
                    if(isAllSelected)
                    	compLi[index].checked = true;
                    else
                    	compLi[index].checked = false;
                 }
            }
            
            $scope.createPatchFromSelected = function() {
                var historyIdMap = {};
                var metadataItemIdMap = {};
                for(var index = 0; index < $scope.paginationList.length; index++)
                {
                    var meta = $scope.paginationList[index];
                    if(meta.checked)
                    {
                        if(meta.contentId != undefined && meta.contentId != '')
                        	metadataItemIdMap[meta.compId] = meta.compId;
                        else
                            historyIdMap[meta.compId] = meta.compId;
                    }  
                }
                if((!isMapEmpty(historyIdMap)) || (!isMapEmpty(metadataItemIdMap)))
                    addToPatchItems(JSON.stringify(historyIdMap), JSON.stringify(metadataItemIdMap));
                else
                    showMessage('Please select a component.');
            };
            
            $scope.viewDetails = function() {
                var sourceTargetIdMap = {};
                
                for(var index = 0; index < $scope.paginationList.length; index++)
                {
                    var meta = $scope.paginationList[index];
                    if(meta.checked)
                    {
                        if(meta.targetCompId != undefined && meta.targetCompId != '')
                            sourceTargetIdMap[meta.compId] = meta.targetCompId;
                        else
                        	sourceTargetIdMap[meta.compId] = '';
                    }  
                }
                if((!isMapEmpty(sourceTargetIdMap)))
                {
                    viewDetails(JSON.stringify(sourceTargetIdMap));
                }
                else
                    showMessage('Please select a component.');
            };
                                    
            $scope.checkUnCheck = function(compLi,offset) {
                var flag = true;
                var index;
                for(var index = offset ; index < (offset+$scope.staticLimit) && index < compLi.length  ; index++) {
                    if( ! compLi[index].checked ) {
                        flag = false;
                        break;
                    }
                }
                $scope.isAllChecked = flag ;
                return flag;
            };
            
            $scope.defaultNextPrevious = function(){
                $scope.isAllChecked = false ;
            }
            
            $scope.refreshOrderBy = function(orderVal) {
                $scope.metaOffSet = 0;
                $scope.viewLimit = $scope.metaOffSet + $scope.staticLimit;
                if(orderVal == $scope.orderByColumn)
                    $scope.isReverse = !$scope.isReverse;
                else
                {
                    $scope.isReverse = false;
                    $scope.orderByColumn = orderVal;
                }
                $scope.defaultNextPrevious();
            };
            
            $scope.showFirst = function() {
                $scope.metaOffSet = 0;
                $scope.viewLimit = $scope.staticLimit;
                $scope.defaultNextPrevious();    
            };
            
            $scope.listPrevious = function() {
                $scope.metaOffSet = $scope.metaOffSet - $scope.staticLimit;
                if($scope.metaOffSet < 0)
                    $scope.metaOffSet = 0;
                $scope.viewLimit = $scope.metaOffSet + $scope.staticLimit;
                $scope.defaultNextPrevious();
            };
            
            $scope.listNext = function(tempTotal) {
                if(($scope.metaOffSet + $scope.staticLimit) < tempTotal)
                {
                    $scope.metaOffSet = $scope.metaOffSet + $scope.staticLimit;
                    $scope.viewLimit = $scope.metaOffSet + $scope.staticLimit;
                }
                $scope.defaultNextPrevious();
            };
            
            $scope.showLast = function(tempTotal) {
                $scope.metaOffSet = tempTotal - (tempTotal % $scope.staticLimit);
                if($scope.metaOffSet == tempTotal && $scope.metaOffSet != 0)
                    $scope.metaOffSet = tempTotal - $scope.staticLimit;
                $scope.viewLimit = $scope.metaOffSet + $scope.staticLimit;
                $scope.defaultNextPrevious();
            };
            
            $scope.isPrevious = function() {
                if($scope.metaOffSet < 1) 
                    return true;
                else
                    return false;
            };
            
            $scope.isNext = function(tempTotal){
                if(tempTotal > $scope.metaOffSet+$scope.staticLimit)
                    return false;
                else 
                    return true;
            };
            
            $scope.totalPageCount = function(tempTotal){
                var totalPage = parseInt(tempTotal % $scope.staticLimit > 0 ? (tempTotal / $scope.staticLimit)+1 : (tempTotal / $scope.staticLimit));
                return totalPage;
            };
            
            $scope.currentPageNo = function(tempTotal){
                var currentPage = 1;
                if($scope.metaOffSet <  $scope.staticLimit)
                    currentPage =  1;
                else
                    currentPage = Math.ceil($scope.metaOffSet / $scope.staticLimit)+1;
                return currentPage;
            };
        }]);
        
        function redirectToDetailPage(detailPageURL)
        {
        	if(detailPageURL != undefined)
        		window.open(detailPageURL,'_blank');
        }
        
        function startComparison(tempType) {
            sourceItems = [];
            targetItems = [];
            selectedComponentType = tempType;
            attachmentIdMap = {};
            currentAttIds = [];
            currentAttIndex = 0;
            if(selectedComponentType != null && selectedComponentType != undefined && selectedComponentType != '') {
                disableFlosumUI();
                showProgress(1);
                console.log(selectedComponentType);
                selectedSourceOption = $("[id$='selectedSourceOption']").val();
                selectedTargetOption = $("[id$='selectedTargetOption']").val();
                selectedSourceRepository = $("[id$='selectedSourceRepository']").val();
                selectedTargetRepository = $("[id$='selectedTargetRepository']").val();
                //selectedSourceOrg = $("[id$='selectedSourceOrg']").val();
                //selectedTargetOrg = $("[id$='selectedTargetOrg']").val();
                selectedSourceSnapshot = $("[id$='selectedSourceSnapshot']").val();
                selectedTargetSnapshot = $("[id$='selectedTargetSnapshot']").val();
                
                sourceName = '';
        		targetName = '';
        		if(selectedSourceOption == 'Repository' && (selectedSourceRepository != undefined && selectedSourceRepository != ''))
	                sourceName = $("[id$='selectedSourceRepository'] :selected").text();
	            else if(selectedSourceOption == 'Snapshot' && (selectedSourceSnapshot != undefined && selectedSourceSnapshot != ''))
	                sourceName = $("[id$='sourceSnapshotName']").val();
                
                if(selectedTargetOption == 'Repository' && (selectedTargetRepository != undefined && selectedTargetRepository != '')) 
	                targetName = $("[id$='selectedTargetRepository'] :selected").text();
	            else if(selectedTargetOption == 'Snapshot' && (selectedTargetSnapshot != undefined && selectedTargetSnapshot != '')) 
	                targetName = $("[id$='targetSnapshotName']").val();
                listSourceComponents(selectedComponentType);
            }
            hide();
        }
        
        function listSourceComponents(selectedComponentType) {
            if(selectedSourceOption == 'Repository' && (selectedSourceRepository != undefined && selectedSourceRepository != ''))
                listComponents(selectedSourceRepository, selectedComponentType, '', handleSourceComponents);
            else if(selectedSourceOption == 'Snapshot' && (selectedSourceSnapshot != undefined && selectedSourceSnapshot != ''))
                listComponents(selectedSourceSnapshot, selectedComponentType, '', handleSourceComponents);
        }
        
        function listTargetComponents(selectedComponentType) {
            if(selectedTargetOption == 'Repository' && (selectedTargetRepository != undefined && selectedTargetRepository != '')) 
                listComponents(selectedTargetRepository, selectedComponentType, '', handleTargetComponents);
            else if(selectedTargetOption == 'Snapshot' && (selectedTargetSnapshot != undefined && selectedTargetSnapshot != '')) 
                listComponents(selectedTargetSnapshot, selectedComponentType, '', handleTargetComponents);
        }
        
        function listComponents(param1,param2,param3,param4) {
            console.log('param1'+param1);
            console.log('param2'+param2);
            console.log('param3'+param3);
            //console.log('param4'+param4);
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.MetadataComparisonController.listComponents}',
                param1,
                param2,
                param3,
                param4
            );
        }
        
        function handleSourceComponents(r,e) {
            if(e.status && r) {
                if(r.resultLi != undefined && r.resultLi.length > 0)
                {
                    for(var index = 0; index < r.resultLi.length; index++)
                    {
                        var comp = r.resultLi[index];
                        if(r.type == "Snapshot" && comp.contentId != undefined && comp.contentId != '')
                            attachmentIdMap[comp.contentId] = comp.contentId;
                        sourceItems.push(comp);
                    }
                }
                if(r.isDone) 
                    listTargetComponents(selectedComponentType);
                else if(!r.isDone) 
                    listComponents(r.parentId, r.compType, r.lastId, handleSourceComponents);
            }
            else 
                showMessage(e.message);
        }
        
        function handleTargetComponents(r,e) {
            if(e.status && r) {
                if(r.resultLi != undefined && r.resultLi.length > 0)
                {
                    for(var index = 0; index < r.resultLi.length; index++)
                    {
                        var comp = r.resultLi[index];
                        if(r.type == "Snapshot" && comp.contentId != undefined && comp.contentId != '')
                            attachmentIdMap[comp.contentId] = comp.contentId;
                        targetItems.push(comp);
                    }
                }
                if(r.isDone) 
                    getDetailsOfAttachments();
                else if(!r.isDone) 
                    listComponents(r.parentId, r.compType, r.lastId, handleTargetComponents);
            }
            else 
                showMessage(e.message);
        }
        
        function getDetailsOfAttachments()
        {
            var tempIdLi = [];
            for(var key in attachmentIdMap)
                tempIdLi.push(key);
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.MetadataComparisonController.getAttachmentList}',
                JSON.stringify(tempIdLi),
                handleAttachmentLimit
            );
        }
        
        //To handle zip files information.
        function handleAttachmentLimit(r,e)
        {
            if(e.status && r) 
            {
                currentAttIds = [];
                currentAttIndex = 0;
                if(r.length > 0)
                {
                    currentAttIds = r;
                    getAttachment();
                }
                else
                {
                    showProgress(100);
                    fillCrcForSnapshotItems();
                }
            }
            else
            {
                showProgress(100);
                showMessage(e.message);
            }
        }
        
        //To get zip file from snapshot and to read the crc codes of components from zip files. 
        function getAttachment()
        {
            if(currentAttIndex < currentAttIds.length)
            {
                var ctAttIds = currentAttIds[currentAttIndex];
                
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.MetadataComparisonController.getAttachments}',
                    JSON.stringify(ctAttIds),
                    function handlegetAttachments(r,e){
                        if(e.status && r){
                            if(r.length > 0)
                            {
                                var attReadIndex = 0;
                                var readFullAtt = function(){
                                    if(attReadIndex < r.length)
                                    {
                                        var att = r[attReadIndex];
                                        var parentId = att.parentId;
                                        var metaType = att.compType;
                                        var base64str = att.base64;
                                        var zip = new JSZip(base64str, {base64:true});
                                        createFileMap(metaType,zip,parentId);
                                        attReadIndex++;
                                        setTimeout(readFullAtt, 0005);
                                    }
                                    else
                                    {
                                        showProgress(5+(((currentAttIndex+1)/currentAttIds.length)*60));
                                        currentAttIndex++;
                                        getAttachment();
                                    }
                                }
                                readFullAtt();
                            }
                            else
                            {
                                showProgress(100);
                                showMessage('Some zip files are missing.');
                            }
                        }
                        else
                        {
                            showMessage(e.message);
                        }
                    }
                );
            }
            else
            {
                showProgress(65);
                fillCrcForSnapshotItems();
            }
        }
        
        function fillCrcForSnapshotItems()
        {
            var finalCompareLi = [];
            var targetCRCMap = {};
            var metaIndex = 0;
            var fillCRCInChunks = function() {
                if(metaIndex < targetItems.length)
                {
                    for(var index=0; metaIndex < targetItems.length && index < 1000; index++)
                    {
                        var meta = targetItems[metaIndex];
                        if(meta.crcCode == '')
                        {
                            meta.key = '';
                            meta.crcCode = 0;
                            if(mmap[meta.type] == undefined)
                            {
                                if(folderMap[meta.type] != undefined)
                                    meta.key = meta.parentId+'#'+folderMap[meta.type]+"#"+meta.fileName;
                                else
                                    meta.key = meta.parentId+'#'+meta.type+"#"+meta.fileName;
                            }
                            else
                                meta.key = meta.parentId+'#'+meta.type+"#"+meta.fullName;
                            if(snapshotCrcMap[meta.key] != undefined && meta.Id != undefined)
                            {
                                meta.crcCode = snapshotCrcMap[meta.key];
                                if(snapshotCrcMap[meta.key+"-meta.xml"] != undefined)
                                    meta.crcCode = meta.crcCode+' '+snapshotCrcMap[meta.key+"-meta.xml"];
                            }
                            else if(bundleTypes[meta.type] != undefined)
                            {      
                            	var map32 = {};
                                for(var mapKey in snapshotCrcMap)
                                {
                                    if(mapKey != undefined && mapKey.indexOf(meta.key+'/') == 0)
                                    {
                                        var fName = mapKey.replace(meta.type+"#",'');
                                        map32[fName] = snapshotCrcMap[mapKey];
                                    }
                                }
                                meta.crcCode = composeBundleCrc(map32);
                            }
                        }
                        if(meta.crcCode != 0)
                        {
                            var targetItem = {};
                            targetItem.changedOn = meta.changedOn;
                            targetItem.LastModifiedDate = meta.LastModifiedDate;
                            targetItem.crcCode = ''+meta.crcCode;
                            targetItem.compId = meta.compId;
                            targetCRCMap[meta.type+'#'+meta.fullName] = targetItem;
                        }
                        metaIndex++;
                    }
                    setTimeout(fillCRCInChunks, 1000);
                }
                else
                    setTimeout(compareCRCWithSource, 0);
            }
            
            var sourceMetaIndex = 0;
            var compareCRCWithSource = function() {
                if(sourceMetaIndex < sourceItems.length)
                {
                    for(var index=0; sourceMetaIndex < sourceItems.length && index < 1000; index++)
                    {
                        var meta = sourceItems[sourceMetaIndex];
                        if(meta.crcCode == '')
                        {
                            meta.key = '';
                            meta.crcCode = 0;
                            if(mmap[meta.type] == undefined)
                            {
                                if(folderMap[meta.type] != undefined)
                                    meta.key = meta.parentId+'#'+folderMap[meta.type]+"#"+meta.fileName;
                                else
                                    meta.key = meta.parentId+'#'+meta.type+"#"+meta.fileName;
                            }
                            else
                                meta.key = meta.parentId+'#'+meta.type+"#"+meta.fullName;
                            if(snapshotCrcMap[meta.key] != undefined && meta.Id != undefined)
                            {
                                meta.crcCode = snapshotCrcMap[meta.key];
                                if(snapshotCrcMap[meta.key+"-meta.xml"] != undefined)
                                    meta.crcCode = meta.crcCode+' '+snapshotCrcMap[meta.key+"-meta.xml"];
                            }
                            else if(bundleTypes[meta.type] != undefined)
                            {   
                            	var map32 = {};   
                                for(var mapKey in snapshotCrcMap)
                                {
                                    if(mapKey != undefined && mapKey.indexOf(meta.key+'/') == 0)
                                    {
                                        var fName = mapKey.replace(meta.type+"#",'');
                                        map32[fName] = snapshotCrcMap[mapKey];
                                    }
                                }
                                meta.crcCode = composeBundleCrc(map32);
                            }
                        }
                        if(meta.crcCode != 0)
                        {
                            var compareItem = meta;
                            compareItem.crcCode = ''+compareItem.crcCode;
                            if(targetCRCMap[meta.type+'#'+meta.fullName] != undefined)
                            {
                                var targetItem = targetCRCMap[meta.type+'#'+meta.fullName];
                                compareItem.targetChangedOn = targetItem.changedOn;
                                compareItem.targetLastModifiedDate = targetItem.LastModifiedDate;
                                compareItem.targetcrcCode = targetItem.crcCode;
                                compareItem.targetCompId = targetItem.compId;
                            }
                            if(compareItem.targetcrcCode == undefined)
                            {
                                compareItem.rowType = 'Source';
                                finalCompareLi.push(compareItem);
                            }
                            else if(compareItem.crcCode != compareItem.targetcrcCode)
                            {
                                compareItem.rowType = 'BothSide';
                                finalCompareLi.push(compareItem);
                                console.log(compareItem);
                            	console.log(compareItem.crcCode+'--vs--'+compareItem.targetcrcCode);
                            }
                        }
                        sourceMetaIndex++;
                    }
                    setTimeout(compareCRCWithSource, 1000);
                }
                else
                {
                    showFinalComparisonUI();
                }
            }
            
            var showFinalComparisonUI = function() {
                showProgress(100);
                angular.element(document.getElementById('angularControllerId')).scope().showPagination(finalCompareLi);
            }
            fillCRCInChunks();
        }
        
        function createFileMap(tempComponentType,tempZip,parentId)
        {
            if(tempComponentType == 'Profile' || tempComponentType == 'PermissionSet')
            {
                tempZip.remove('objects');
                tempZip.remove('classes');
                tempZip.remove('pages');
                tempZip.remove('layouts');
                tempZip.remove('tabs');
                tempZip.remove('applications');
                tempZip.remove('dataSources');
                tempZip.remove('customPermissions');
                for(var fileName in tempZip.files)
                {
                    if(fileName != undefined && (fileName.indexOf("profiles/") == 0 || fileName.indexOf("permissionsets/") == 0)) 
                    {
                        var fileData = tempZip.files[fileName].asBinary();
                        snapshotCrcMap[parentId+'#'+tempComponentType+"#"+fileName] = getCrcWithData(fileData,{compress:true});
                    }
                }
            }
            else if(mmap[tempComponentType] == undefined)
            { 
                    for(var fileName in tempZip.files)
                    {
                        if(fileName != undefined && fileName.charAt(fileName.length - 1) != '/' && fileName != 'package.xml' && fileName != 'undefined') 
                        {
                            var fileData = tempZip.files[fileName].asBinary();
                            snapshotCrcMap[parentId+'#'+tempComponentType+"#"+fileName] = getCrcWithData(fileData);
                        }
                    }
            }
            else
            {
            	for(var fileName in tempZip.files)
                    if(fileName != undefined && fileName.charAt(fileName.length - 1) != '/' && fileName != 'package.xml' && fileName != 'undefined')
                        getChildFileMap(tempComponentType,tempZip.files[fileName].asText(),fileName,parentId);
            }
        }
        
        function getChildFileMap(metaType,xml,fileName,parentId)
        {
            var fullName = '';
            if(metaType != 'CustomLabel')
                fullName = fileName.slice(fileName.indexOf("/")+1,fileName.lastIndexOf('.'))+".";
    
            var x2js = new X2JS({useDoubleQuotes : true, stripWhitespaces : false});
            var jsnMap ={};
            var tempJSON = '';
            var srcjson = x2js.xml_str2json(xml);
            if(srcjson != undefined && srcjson != null)
            {
                var srcitems;
                if(metaType == 'CustomLabel')
                {
                    var srcMetaItem = srcjson.CustomLabels;
                    srcitems = srcMetaItem.labels;
                }
                else if(metaType == 'CustomField')
                {
                    var srcMetaItem = srcjson.CustomObject;
                    srcitems = srcMetaItem.fields;
                }
                else if(metaType == 'ListView')
                {
                    var srcMetaItem = srcjson.CustomObject;
                    srcitems = srcMetaItem.listViews;
                }
                else if(metaType == 'CompactLayout')
                {
                    var srcMetaItem = srcjson.CustomObject;
                    srcitems = srcMetaItem.compactLayouts;
                }
                else if(metaType == 'WebLink')
                {
                    var srcMetaItem = srcjson.CustomObject;
                    srcitems = srcMetaItem.webLinks;
                }
                else if(metaType == 'RecordType')
                {
                    var srcMetaItem = srcjson.CustomObject;
                    srcitems = srcMetaItem.recordTypes;
                }
                else if(metaType == 'FieldSet')
                {
                    var srcMetaItem = srcjson.CustomObject;
                    srcitems = srcMetaItem.fieldSets;
                }
                else if(metaType == 'ValidationRule')
                {
                    var srcMetaItem = srcjson.CustomObject;
                    srcitems = srcMetaItem.validationRules;
                }
                else if(metaType == 'AssignmentRule')
                {
                    var srcMetaItem = srcjson.AssignmentRules;
                    srcitems = srcMetaItem.assignmentRule;
                }
                else if(metaType == 'AutoResponseRule')
                {
                    var srcMetaItem = srcjson.AutoResponseRules;
                    srcitems = srcMetaItem.autoResponseRule;
                }
                else if(metaType == 'WorkflowTask')
                {
                    var srcMetaItem = srcjson.Workflow;
                    srcitems = srcMetaItem.tasks;
                }
                else if(metaType == 'WorkflowOutboundMessage')
                {
                    var srcMetaItem = srcjson.Workflow;
                    srcitems = srcMetaItem.outboundMessages;
                }
                else if(metaType == 'WorkflowFieldUpdate')
                {
                    var srcMetaItem = srcjson.Workflow;
                    srcitems = srcMetaItem.fieldUpdates;
                }
                else if(metaType == 'WorkflowKnowledgePublish')
                {
                    var srcMetaItem = srcjson.Workflow;
                    srcitems = srcMetaItem.knowledgePublishes;
                }
                else if(metaType == 'WorkflowAlert')
                {
                    var srcMetaItem = srcjson.Workflow;
                    srcitems = srcMetaItem.alerts;
                }
                else if( metaType == 'WorkflowRule')
                {
                    var srcMetaItem = srcjson.Workflow;
                    srcitems = srcMetaItem.rules;
                }
                else if(metaType == 'SharingCriteriaRule')
                {
                    var srcMetaItem = srcjson.SharingRules;
                    srcitems = srcMetaItem.sharingCriteriaRules;
                }
                else if(metaType == 'SharingOwnerRule')
                {
                    var srcMetaItem = srcjson.SharingRules;
                    srcitems = srcMetaItem.sharingOwnerRules;
                }
                else if(metaType == 'BusinessProcess')
                {
                    var srcMetaItem = srcjson.CustomObject;
                    srcitems = srcMetaItem.businessProcesses;
                }
                else if(metaType == 'SharingReason')
                {
                    var srcMetaItem = srcjson.CustomObject;
                    srcitems = srcMetaItem.sharingReasons;
                }
                else if(metaType == 'EscalationRule')
                {
                    var srcMetaItem = srcjson.EscalationRules;
                    srcitems = srcMetaItem.escalationRule;
                }
                else if(metaType == 'MatchingRule')    
                {
                    var srcMetaItem = srcjson.MatchingRules;
                    srcitems = srcMetaItem.matchingRules;
                }
                else if(metaType == 'ManagedTopic')
                {
                    var srcMetaItem = srcjson.ManagedTopics;
                    srcitems = srcMetaItem.ManagedTopic;
                }
                if(srcitems != undefined)
                {
                    if(srcitems.fullName == undefined)
                    {   
                        for(var i in srcitems)  
                        {
                            if(i < srcitems.length)
                            {
                                var v = srcitems[i];
                                jsnMap[v.fullName]= JSON.stringify(v);
                            }
                        }            
                    }
                    else
                        jsnMap[srcitems.fullName] = JSON.stringify(srcitems);
                }
            }
            for(var name in jsnMap)
            {
                var tempXml = '';
                var tempJSON = jsnMap[name];
                if(tempJSON != undefined)
                {
                    //header
                    if(metaType == 'CustomLabel')
                    {
                        tempXml = '<?xml version="1.0" encoding="UTF-8"?><CustomLabels xmlns="http://soap.sforce.com/2006/04/metadata">';
                    }
                    else if(metaType == 'AssignmentRule' )
                    {
                        tempXml = '<?xml version="1.0" encoding="UTF-8"?><AssignmentRules xmlns="http://soap.sforce.com/2006/04/metadata">';
                    }
                    else if(metaType == 'AutoResponseRule')
                    {
                        tempXml = '<?xml version="1.0" encoding="UTF-8"?><AutoResponseRules xmlns="http://soap.sforce.com/2006/04/metadata">';
                    }
                    else if(metaType == 'WorkflowAlert' || metaType == 'WorkflowFieldUpdate'|| metaType == 'WorkflowOutboundMessage'|| metaType == 'WorkflowTask' || metaType == 'WorkflowRule' || metaType == 'WorkflowKnowledgePublish')
                    {
                        tempXml = '<?xml version="1.0" encoding="UTF-8"?><Workflow xmlns="http://soap.sforce.com/2006/04/metadata">';
                    }
                    else if(metaType == 'SharingCriteriaRule' || metaType == 'SharingOwnerRule')
                    {
                        tempXml = '<?xml version="1.0" encoding="UTF-8"?><SharingRules xmlns="http://soap.sforce.com/2006/04/metadata">';
                    }
                    else if(metaType == 'EscalationRule')
                    {
                        tempXml = '<?xml version="1.0" encoding="UTF-8"?><EscalationRules xmlns="http://soap.sforce.com/2006/04/metadata">';
                    }
                    else if(metaType == 'MatchingRule')
                    {
                        tempXml = '<?xml version="1.0" encoding="UTF-8"?><MatchingRules xmlns="http://soap.sforce.com/2006/04/metadata">';
                    }
                    else if(metaType == 'ManagedTopic')
                    {
                        tempXml = '<?xml version="1.0" encoding="UTF-8"?><ManagedTopics xmlns="http://soap.sforce.com/2006/04/metadata">';
                    }
                    else
                    {
                        tempXml = '<?xml version="1.0" encoding="UTF-8"?><CustomObject xmlns="http://soap.sforce.com/2006/04/metadata">';
                    }
                    
                    //body
                    if(metaType == 'CustomLabel')
                    {
                        tempXml = tempXml +'<labels>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</labels>';
                    }
                    else if(metaType == 'CustomField')
                    {
                        tempXml = tempXml +'<fields>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</fields>';
                    }
                    else if(metaType == 'ListView')
                    {
                        tempXml = tempXml +'<listViews>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</listViews>';
                    }
                    else if(metaType == 'CompactLayout')
                    {
                        tempXml = tempXml +'<compactLayouts>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</compactLayouts>';
                    }
                    else if(metaType == 'WebLink')
                    {
                        tempXml = tempXml +'<webLinks>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</webLinks>';
                    }
                    else if(metaType == 'RecordType')
                    {
                        tempXml = tempXml +'<recordTypes>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</recordTypes>';
                    }
                    else if(metaType == 'FieldSet')
                    {
                        tempXml = tempXml +'<fieldSets>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</fieldSets>';
                    }
                    else if(metaType == 'ValidationRule')
                    {
                        tempXml = tempXml +'<validationRules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</validationRules>';
                    }
                    else if(metaType == 'AssignmentRule')
                    {
                        tempXml = tempXml +'<assignmentRule>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</assignmentRule>';
                    }
                    else if(metaType == 'AutoResponseRule')
                    {
                        tempXml = tempXml +'<autoResponseRule>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</autoResponseRule>';
                    }
                    else if(metaType == 'WorkflowAlert')
                    {
                        tempXml = tempXml +'<alerts>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</alerts>';
                    }
                    else if(metaType == 'WorkflowFieldUpdate')
                    {
                        tempXml = tempXml +'<fieldUpdates>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</fieldUpdates>';
                    }
                     else if(metaType == 'WorkflowKnowledgePublish')
                    {
                        tempXml = tempXml +'<knowledgePublishes>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</knowledgePublishes>';
                    }
                    else if(metaType == 'WorkflowOutboundMessage')
                    {
                        tempXml = tempXml +'<outboundMessages>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</outboundMessages>';
                    }
                    else if(metaType == 'WorkflowTask')
                    {
                        tempXml = tempXml +'<tasks>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</tasks>';
                    }
                    else if(metaType == 'WorkflowRule')
                    {
                        tempXml = tempXml +'<rules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</rules>';
                    }
                    else if(metaType == 'SharingCriteriaRule')
                    {
                        tempXml = tempXml +'<sharingCriteriaRules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</sharingCriteriaRules>';
                    }
                    else if(metaType == 'SharingOwnerRule')
                    {
                        tempXml = tempXml +'<sharingOwnerRules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</sharingOwnerRules>';
                    }
                    else if(metaType == 'EscalationRule')
                    {
                        tempXml = tempXml +'<escalationRule>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</escalationRule>';
                    }
                    else if(metaType == 'MatchingRule')
                    {
                        tempXml = tempXml +'<matchingRules>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</matchingRules>';
                    }
                    else if(metaType == 'ManagedTopic')
                    {
                        tempXml = tempXml +'<managedTopic>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</managedTopic>';
                    }
                    else if(metaType == 'BusinessProcess')
                    {
                        tempXml = tempXml +'<businessProcesses>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</businessProcesses>';
                    }
                    else if(metaType == 'SharingReason')
                    {
                        tempXml = tempXml +'<sharingReasons>'+x2js.json2xml_str($.parseJSON(tempJSON))+'</sharingReasons>';
                    }
                    
                    
                    //footer
                    if(metaType == 'CustomLabel')
                    {
                        tempXml = tempXml +'</CustomLabels>';
                    }
                    else if(metaType == 'AssignmentRule' )
                    {
                        tempXml = tempXml +'</AssignmentRules>';
                    }
                    else if(metaType == 'AutoResponseRule')
                    {
                        tempXml = tempXml +'</AutoResponseRules>';
                    }
                    else if(metaType == 'WorkflowAlert' || metaType == 'WorkflowFieldUpdate'|| metaType == 'WorkflowOutboundMessage'|| metaType == 'WorkflowTask' || metaType == 'WorkflowRule' || metaType == 'WorkflowKnowledgePublish')
                    {
                        tempXml = tempXml +'</Workflow>';
                    }
                    else if(metaType == 'SharingCriteriaRule' || metaType == 'SharingOwnerRule')
                    {
                        tempXml = tempXml +'</SharingRules>';
                    }
                    else if(metaType == 'EscalationRule')
                    {
                        tempXml = tempXml +'</EscalationRules>';
                    }
                    else if(metaType == 'MatchingRule')
                    {
                        tempXml = tempXml +'</MatchingRules>';
                    }
                    else if(metaType == 'ManagedTopic')
                    {
                        tempXml = tempXml +'</ManagedTopics>';
                    }
                    else
                    {
                        tempXml = tempXml +'</CustomObject>';
                    }
                    snapshotCrcMap[parentId+'#'+metaType+"#"+fullName+""+name] =  getCrcWithData(tempXml,{isInnerType:true});
                }
            }
        }
        
        function hidePaginationData()
        {
            show();
            hidePagination();
            listSourceSnapshotComponents();
        }
        
        function hidePagination()
        {
            angular.element(document.getElementById('angularControllerId')).scope().clearPagination();
        }
        
        function setMessageOnPage(msg)
        {
            var parentVal = $("[id$='msg']");
            if(parentVal != undefined)
            {
                parentVal.html('');
                if(msg != '')
                {
                    var childVal = '<span id="j_id0:msg:j_id19:j_id20:0:j_id21">'+
                                        '<div class="message errorM3 slds-notify slds-notify--alert slds-theme--error customMessage " role="alert">'+
                                            '<table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">'+
                                                '<tbody>'+
                                                    '<tr valign="top">'+
                                                        /*'<td><img alt="ERROR" class="msgIcon" src="/s.gif" title="ERROR"></td>'+*/
                                                        '<td class="messageCell">'+
                                                            '<div id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id24" class="messageText">'+
                                                                '<span id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id25" style="color:#cc0000">'+
                                                                    '<h4>Error:</h4>'+
                                                                '</span>'+msg+'<br>'+
                                                            '</div>'+
                                                        '</td>'+
                                                    '</tr>'+
                                                    '<tr>'+
                                                        '<td></td>'+
                                                        '<td></td>'+
                                                    '</tr>'+
                                                '</tbody>'+
                                            '</table>'+
                                        '</div>'+
                                    '</span>';
                    parentVal.append(childVal); 
                }        
            }
            overridePageMessages();
        }
        
        function setInfoMessageOnPage(msg)
        {
            var parentVal = $("[id$='msg']");
            if(parentVal != undefined)
            {
                parentVal.html('');
                var childVal = '<span id="j_id0:msg:j_id19:j_id20:0:j_id21">'+
                                    '<div class="message infoM3 slds-notify slds-notify--toast customMessage infoMessage " role="alert">'+
                                        '<table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">'+
                                            '<tbody>'+
                                                '<tr valign="top">'+
                                                    /*'<td><img alt="INFO" class="msgIcon" src="/s.gif" title="INFO"></td>'+*/
                                                    '<td class="messageCell">'+
                                                        '<div id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id24" class="messageText">'+
                                                            '<span id="j_id0:msg:j_id19:j_id20:0:j_id21:j_id22:j_id25">'+
                                                                '<h4></h4>'+
                                                            '</span>'+msg+'<br>'+
                                                        '</div>'+
                                                    '</td>'+
                                                '</tr>'+
                                                '<tr>'+
                                                    '<td></td>'+
                                                    '<td></td>'+
                                                '</tr>'+
                                            '</tbody>'+
                                        '</table>'+
                                    '</div>'+
                                '</span>';
                parentVal.append(childVal);             
            }
            enableFlosumUI();
            overridePageMessages();
            hide();
        }
        
        function showProgress(pVal)
        {
            var pb = $("#progressbar");
            if(pb != undefined)
                pb.progressbar({value: pVal});
        }
        
        function showMessage(message)
        {
            setMessageOnPage(message);
            enableFlosumUI();
            overridePageMessages();
            hide();
            var pb = $("#progressbar");
            if(pb != undefined){
            	//pb.progressbar({value: 0});
            	pb.progressbar( "destroy" );
            } 
        }
                
        const XML_HEADER = '<?xml version="1.0" encoding="UTF-8"?>';
		function getCrcWithData(zipData,flags)
		{
			if (zipData != undefined &&flags != undefined && flags.isInnerType == true){
				zipData = vkbeautify.xml(zipData);
			}
			return normalZip.crc32(zipData,32);
		}
		
		// analyse and return bundle's crc32 sum (see the specs for detail)
        function composeBundleCrc(mapCrc32){
            ////console.log('componentStack '+JSON.stringify(mapCrc32));
            var crcCode = 0;
            
            // map name => crc32
            var keys = Object.keys(mapCrc32).sort();
            if (keys.length > 0 ) crcCode = mapCrc32[keys[0]];
            for (var i = 1; i < keys.length; i++){
                crcCode = Math.round((mapCrc32[keys[i]]+crcCode)/2);
            }                                   
                                                                
            return crcCode;
        }
        
        function disableFlosumUI()
        {
            var toDisableItems = document.getElementsByClassName('disableitem');
            for (var i = 0; i < toDisableItems.length; i++) 
            {
                if(toDisableItems[i].type == 'button' || toDisableItems[i].type =='submit' || 
                	toDisableItems[i].type == 'select-one' || toDisableItems[i].type == 'text' || 
                	toDisableItems[i].type == 'checkbox' || toDisableItems[i].tagName == 'IMG')
                {
                    toDisableItems[i].disabled = true;
                    if(toDisableItems[i].tagName == 'IMG')
                    {
                    	toDisableItems[i].style.pointerEvents = 'none';
                    }
                    else if(toDisableItems[i].type == 'button' || toDisableItems[i].type =='submit')
                        toDisableItems[i].className += ' btnDisabled';
                }
            }
        }
        
        function enableFlosumUI()
        {
            var toDisableItems = document.getElementsByClassName('disableitem');
            for (var i = 0; i < toDisableItems.length; i++) 
            {
                if(toDisableItems[i].type == 'button' || toDisableItems[i].type =='submit' || 
                	toDisableItems[i].type == 'select-one' || toDisableItems[i].type == 'text' || 
                	toDisableItems[i].type == 'checkbox' || toDisableItems[i].tagName == 'IMG')
                {
                    toDisableItems[i].disabled = false;
                    if(toDisableItems[i].tagName == 'IMG')
                    {
                    	toDisableItems[i].style.pointerEvents = '';
                    }
                    else if(toDisableItems[i].type == 'button' || toDisableItems[i].type =='submit')
                        toDisableItems[i].className = toDisableItems[i].className.replace(' btnDisabled','');
                }
            }
        }
        
        function isMapEmpty(localMap)
        {
            for(var key in localMap)
            {
                return false;
            }
            return true;
        }
        
        function createPatchManifestItem(IsFromRepository,compHistoryIdJSON,metaIdJSON,newPatchId)
		{
			if(IsFromRepository && compHistoryIdJSON.length > 0)
			{
				CTP_startCompHistoryAddToPatch(compHistoryIdJSON,newPatchId);
			}
			else
			{
				CTP_startAddToPatch(metaIdJSON,newPatchId);
			}
		}
		
		function overridePageMessages(){    
	        var textureEffect = '';
	        textureEffect = 'slds-theme--alert-texture';
	        $('.warningM3').addClass('slds-notify slds-notify--toast slds-theme--warning customMessage '+textureEffect);          
	        $('.confirmM3').addClass('slds-notify slds-notify--alert slds-theme--success  customMessage '+textureEffect);    
	        $('.errorM3').addClass('slds-notify slds-notify--alert slds-theme--error customMessage '+textureEffect);                  
	        $('.infoM3').addClass('slds-notify slds-notify--toast customMessage '+textureEffect);    
	        $('.btn').removeClass('btn');                 
	        $('.errorM3').removeClass('errorM3'); 
	        $('.confirmM3').removeClass('confirmM3'); 
	        $('.infoM3').removeClass('infoM3');   
	        $('.warningM3').removeClass('warningM3');  
	    }
    </script>
</apex:page>